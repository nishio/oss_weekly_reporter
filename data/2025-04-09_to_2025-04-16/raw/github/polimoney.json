[
  {
    "id": 2990309670,
    "number": 5,
    "title": "議員からの掲載許可に基づくデータ表示制御（オプトイン・アウト）機能",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/polimoney/issues/5",
    "user": "Olemi-llm-apprentice",
    "created_at": "2025-04-12T07:24:22Z",
    "body": "**背景:**\nPolimoney プロジェクトで扱う政治資金収支報告書のデータは機微情報を含む可能性があり、分析結果や元データの公開にあたっては、関連する議員等からの掲載許可が必要となるケースが想定されます。許可が得られた情報のみを適切に公開し、許可が得られていない情報は非公開とする運用が求められます。\n\n**課題:**\n現在のシステム（データ処理パイプライン、および将来的な表示インターフェース）には、議員や団体ごとの掲載許可状況に基づいてデータの公開範囲を制御する仕組みがありません。このため、許可が得られたタイミングで迅速かつ正確に情報を公開したり、逆に許可が得られていない情報を確実に非公開にしたりすることが困難です。\n\n**提案:**\n議員や政治団体からの掲載許可状況に応じて、関連するデータの公開/非公開を制御できるオプトイン・アウト機能を実装します。\n\n1.  **許可ステータス管理:**\n    *   各議員や団体、あるいは分析対象のデータセット（例: 特定の収支報告書に対応する JSON データ）に対して、掲載許可の有無を示すステータス（例: `publication_approved: true/false`, `opt_in_status: granted/pending/denied` など）を管理する仕組みを導入します。\n    *   このステータスをデータ自体（例: JSON ファイル内）に含めるか、別途管理データベースを用意するかを検討します。\n2.  **ステータス更新プロセス:**\n    *   議員等から掲載許可が得られた、あるいは取り下げられた場合に、上記ステータスを更新するためのプロセス（手動更新、管理ツール、API など）を定義・実装します。\n3.  **表示ロジックへの反映:**\n    *   データを利用して情報を表示するコンポーネント（例: Web アプリケーション、分析レポート生成ツールなど）において、この許可ステータスをチェックし、許可されているデータのみを表示（オプトイン）、または許可されていないデータを非表示（オプトアウト）にするロジックを組み込みます。\n4.  **デフォルト状態の定義:**\n    *   許可ステータスが未設定の場合のデフォルトの挙動（デフォルトで公開か非公開か）を明確に定義します。（通常はデフォルト非公開が安全）\n\n**期待される効果:**\n\n*   議員等からの掲載許可が得られたデータのみを、迅速かつ適切に公開できるようになる。\n*   許可が得られていない情報の意図しない公開を防ぎ、コンプライアンスを遵守できる。\n*   プロジェクトの透明性と信頼性を高める。\n\n**担当者:** (任意)\n**ラベル:** enhancement, feature, compliance, data privacy\n",
    "type": "issue"
  },
  {
    "id": 2990308342,
    "number": 4,
    "title": "総務省ウェブサイトからの政治資金収支報告書PDF自動取得機能",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/polimoney/issues/4",
    "user": "Olemi-llm-apprentice",
    "created_at": "2025-04-12T07:21:37Z",
    "body": "**背景:**\n政治資金収支報告書の分析には、まず総務省のウェブサイトから対象となる報告書の PDF ファイルを入手する必要があります。現在は、以下のページから手動で目的の団体を探し、PDF をダウンロードする必要があります。\n\n*   参照サイト: [政治資金収支報告書（令和6年11月29日公表（令和5年分定期公表））](https://www.soumu.go.jp/senkyo/seiji_s/seijishikin/reports/SS20241129/)\n\nこの手作業は、特に多数の団体を対象とする場合、非常に時間がかかり非効率です。\n\n**課題:**\n\n*   総務省のウェブサイト構造を解析し、目的の団体の報告書 PDF へのリンクを特定する必要がある。\n*   ウェブサイトは団体種別（政党本部、政党支部、資金管理団体など）や、あいうえお順のインデックスで構成されており、目的の団体を見つけるために複数のページをナビゲートする必要がある場合がある。\n*   手動でのダウンロードは時間と手間がかかる。\n\n**提案:**\n総務省のウェブサイトをクローリングし、指定された条件に基づいて政治資金収支報告書の PDF ファイルを自動でダウンロードするスクリプト機能を追加します。\n\n1.  **ウェブスクレイピングの実装:**\n    *   Python ライブラリ（例: `requests`, `BeautifulSoup4`）を使用して、上記の総務省のウェブサイトを解析します。\n2.  **対象指定機能:**\n    *   コマンドライン引数や設定ファイルで、ダウンロード対象とする報告書の公表年、団体種別（政党本部、支部、資金管理団体、その他の政治団体）、特定の団体名などを指定できるようにします。\n3.  **リンク探索とダウンロード:**\n    *   指定された条件に基づき、ウェブサイトのリンクをたどり、該当する団体の報告書 PDF へのリンクを特定します。\n    *   特定したリンクから PDF ファイルをダウンロードし、分かりやすい命名規則（例: `報告年_団体名_種別.pdf`）で指定されたディレクトリに保存します。\n4.  **負荷への配慮:**\n    *   総務省サーバーへの過度な負荷を避けるため、リクエスト間に適切な待機時間（例: `time.sleep()`）を設けます。また、総務省の `robots.txt` や利用規約を尊重します。\n\n**期待される効果:**\n政治資金収支報告書 PDF の収集プロセスが自動化され、分析作業の準備にかかる時間と手間が大幅に削減される。\n\n**担当者:** (任意)\n**ラベル:** enhancement, web scraping, data acquisition, automation",
    "type": "issue"
  },
  {
    "id": 2990306052,
    "number": 3,
    "title": "Gemini API呼び出しの並列化とエラーハンドリング強化（レートリミット対応）",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/polimoney/issues/3",
    "user": "Olemi-llm-apprentice",
    "created_at": "2025-04-12T07:16:30Z",
    "body": "**背景:**\n`analyze_image_gemini.py` は、1枚ずつ画像を Gemini API に送信して解析を実行します。多数の画像ページ（PDFから変換されたものなど）を処理する場合、この逐次処理は全体の完了までに非常に長い時間がかかります。また、API 呼び出しはネットワークエラーや API 側のレートリミット（利用制限）などにより失敗する可能性があります。\n\n**課題:**\n\n1.  **処理時間の長さ:** 多数の画像を処理する際の全体的なスループットが低い。\n2.  **レートリミットエラー:** Gemini API のレートリミットに達した場合、処理が中断してしまう。\n3.  **一時的なエラー:** ネットワークの不安定さなどによる一時的なエラーが発生した場合、処理が失敗してしまう。\n\n**提案:**\nスクリプトのパフォーマンスと安定性を向上させるために、以下の改善を実装します。\n\n1.  **並列処理の実装:**\n    *   複数の画像解析リクエストを同時に Gemini API へ送信できるように、並列処理（マルチスレッド、マルチプロセス、または非同期処理）を導入します。Python の `concurrent.futures` や `asyncio` ライブラリの活用を検討します。\n    *   並列度（同時に実行するリクエスト数）を設定可能にし、実行環境や API の制限に応じて調整できるようにします。\n2.  **レートリミット対応:**\n    *   Gemini API からレートリミットエラー（例: HTTP 429 Too Many Requests）が返された場合に、処理を即座に中断するのではなく、一定時間待機してからリクエストを再試行するロジック（例: Exponential Backoff）を実装します。\n3.  **リトライ処理の強化:**\n    *   レートリミット以外の特定の一時的なエラー（ネットワークエラーなど）に対しても、リトライ処理を実装します。\n4.  **エラーハンドリングの改善:**\n    *   リトライしても最終的に失敗したリクエストや、その他の予期せぬエラーが発生した場合でも、全体処理が停止しないようにエラーハンドリングを強化します。失敗した画像とその理由を記録し、後で確認できるようにします。\n\n**期待される効果:**\n\n*   複数の画像ファイルを処理する際の全体的な実行時間が大幅に短縮される。\n*   API のレートリミットや一時的なネットワークエラーに対する耐性が向上し、スクリプトの安定性が向上する。\n*   エラーが発生した場合でも、成功した処理は維持され、失敗した処理を特定しやすくなる。\n\n**担当者:** (任意)\n**ラベル:** enhancement, performance, error handling, api\n",
    "type": "issue"
  },
  {
    "id": 2990300562,
    "number": 2,
    "title": "収支報告書のフォーマット差異に対応し、プロンプトを最適化する",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/polimoney/issues/2",
    "user": "Olemi-llm-apprentice",
    "created_at": "2025-04-12T07:11:56Z",
    "body": "# 生成した文章です\n\n**背景:**\n政治資金収支報告書は、報告主体（政党支部、資金管理団体など）や報告対象（収入、支出、寄付、資産など）、作成時期によって、使用される様式（フォーマット）が異なります。これにより、記載される項目名、レイアウト、表の構造などが微妙に、あるいは大きく異なる場合があります。\n\n**課題:**\n現在の `analyze_image_gemini.py` は、すべての画像に対して単一の汎用的なプロンプトを使用しています。このため、特定のフォーマットに対しては最適な情報抽出ができず、精度が低下したり、必要な情報が欠落したりする可能性があります。\n\n**提案:**\n画像解析の精度と網羅性を向上させるため、以下の段階的な対応を検討・実装します。\n\n1.  **フォーマットの分類:**\n    *   処理対象となる収支報告書の主要なフォーマット（様式）をいくつか特定し、分類します。（例: 収入総括表、支出総括表、寄付明細、特定寄付明細など）\n2.  **フォーマット識別の検討:**\n    *   画像の内容（タイトルや特徴的なキーワードなど）から、どのフォーマットに該当するかを自動または半自動で識別するロジックを検討します。（初期段階では手動での指定も可）\n3.  **フォーマット別プロンプトの作成:**\n    *   分類された各フォーマットに対して、そのレイアウトや項目名を考慮した、より具体的で効果的なプロンプトを作成します。\n4.  **プロンプト切り替えの実装:**\n    *   `analyze_image_gemini.py` または関連するワークフローを修正し、識別された（または指定された）フォーマットに応じて適切なプロンプトを選択し、Gemini API に渡すようにします。\n\n**期待される効果:**\n様々なフォーマットの収支報告書に対して、より正確で網羅的なデータ抽出が可能になる。\n\n**担当者:** (任意)\n**ラベル:** enhancement, prompt engineering, ocr",
    "type": "issue"
  },
  {
    "id": 2990299328,
    "number": 1,
    "title": "JSONデータから集計行（小計・合計）を除外する",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/polimoney/issues/1",
    "user": "Olemi-llm-apprentice",
    "created_at": "2025-04-12T07:11:09Z",
    "body": "# 生成した文章です\n\n**背景:**\n現在、`analyze_image_gemini.py` スクリプトは政治資金収支報告書の画像からデータを抽出し JSON 形式で出力していますが、抽出結果には表内の「小計」や「合計」といった集計を示す行が含まれることがあります。\n\n**課題:**\nこれらの集計行は個別の取引データではなく、後続のデータ集計や分析プロセスにおいて二重計上やノイズの原因となる可能性があります。正確な分析のためには、これらの行をデータセットから除外する必要があります。\n\n**提案:**\n以下のいずれか、または両方の対応を検討・実装します。\n\n1.  **後処理による除外:**\n    *   `analyze_image_gemini.py` によって生成された JSON ファイルを読み込み、「摘要」や「氏名」などのカラムに「小計」、「合計」、「繰越」などの特定のキーワードが含まれるレコードを特定し、除外する後処理スクリプトを作成する。\n2.  **プロンプトの改善:**\n    *   `analyze_image_gemini.py` のデフォルトプロンプトを修正し、Gemini に対して「小計」や「合計」に該当する行を抽出対象から除外するように、より明確に指示する。\n\n**期待される効果:**\n生成される JSON データの精度が向上し、後続の分析プロセスが簡略化・正確化される。\n\n**担当者:** (任意)\n**ラベル:** enhancement, data cleaning\n",
    "type": "issue"
  },
  {
    "id": 2994134330,
    "number": 6,
    "title": "可視化にデータを繋ぎこむ処理を実装",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/polimoney/pull/6",
    "user": "spinute",
    "created_at": "2025-04-14T20:28:30Z",
    "merged_at": "2025-04-16T05:43:50Z",
    "body": "https://w1740803485-clv347541.slack.com/archives/C08FL5L6GSH/p1744618040915549 のもの\r\n\r\n- 現サイトは example.ts に書いてある固定のサンプルデータを表示している\r\n- これを実データに切り替えるために、支出報告書から抽出したデータから、可視化用データを作成したい。convert.ts はこの変換処理を（現状ざっくり）実装している\r\n- 使い方：`node --experimental-strip-types generator.ts -i sample_input.json -o sample_output.json`\r\n    - 今は CLI から実行する作りになっているので、抽出→変換→可視化が繋がって動くようにする必要もある\r\n- 入力形式は完全には確定しておらず、データ抽出処理と細部のすり合わせが必要\r\n    - 基本的には `{ year: number, categories: InputCategory[], transactions: InputTransaction[] }` 型のデータがあれば可視化用のデータを作れる\r\n    - transactions の細かい入れ方は、自信ないのでとりあえず決め打ちで validation をたくさん入れてある。すり合わせが必要\r\n        - 「翌年度への繰越」を transaction として明に含むか、transactions には含まずに収支の差から計算するか、等\r\n}`\r\n- 出力形式は example.ts の型に合わせている\r\n    - `{ summary: Summary, flows: Flow[], incomeTransactions: Transaction[], expenseTransactions: Transaction[] }`",
    "additions": 863,
    "deletions": 0,
    "changed_files": 3,
    "type": "pr"
  }
]
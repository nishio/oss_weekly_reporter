[
  {
    "id": 2990926652,
    "number": 298,
    "title": "[DOCUMENT]docker-compose → docker compose",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/298",
    "user": "nishio",
    "created_at": "2025-04-13T01:41:53Z",
    "closed_at": "2025-04-13T02:57:33Z",
    "body": "https://w1740803485-clv347541.slack.com/archives/C08F7JZPD63/p1744505244553429\n\nNISHIO Hirokazu\n>「README.md記載の「docker-compose up」ではコマンド未発見エラー：「docker compose up」とハイフンなしにして解決」\n>(解決策) READMEのコマンドを docker compose up (ハイフンなし) に修正する。\n\nこれはどっちが正しいんだろ\n\n\nPin\ndocker-compose が v1、docker compose が v2 で、前者が廃止予定で後者に徐々に置き換わっていっています\nそのため docker-compose コマンドが入っていない環境が増えてきていて、v2 出てからもう結構経つので、基本は v2 に寄せていく方針が良さそうです\n逆に docker-compose があって docker compose がない状況になるのは、v2 以前に構築した docker 環境をアップデートせずに使っている場合くらいかなと思いますが、そういう人は自力で読み替えられそうかなと:blob-thinking:（おそらく docker 歴5年〜の人なので）",
    "type": "issue"
  },
  {
    "id": 2987317166,
    "number": 278,
    "title": "[BUG]階層図を全画面表示にすると一番右上の要約文が「全画面終了」ボタンの後ろに隠れてしまう",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/278",
    "user": "masatosasano2",
    "created_at": "2025-04-11T01:26:15Z",
    "closed_at": "2025-04-15T03:37:25Z",
    "body": "### 概要\n\n全画面表示の「全画面終了」ボタンの後ろに要素の要約文が一部隠れてしまい、読めないことがある。\n\n### 再現手順\n\n1. レポート画面を開く\n2. 「階層図」chartに切り替える\n3. 「全画面表示」ボタンを押す\n4. 一番右上のパネルにマウスカーソルを重ねる\n\n発生条件：正確な条件は未調査。他のchat（全体図、濃い意見グループ）でもノードの配置によっては発生しそう。\n\n### 期待する動作\n\n要約文が隠れないで欲しいです。\n\n修正されるにあたって以下の点が満たされてほしいのですが、具体的な修正案はありません。\n・画面右上に要素が密集していても問題ないようにする\n　（なので、おそらく「要約文を要素の左上に出す」ではNG）\n・「全画面終了」ボタンが隠れてしまい見つけられないことを防ぐ\n　（なので、おそらく「要約文を最前面に出す」ではNG）\n\n### スクリーンショット・ログ\n\n![Image](https://github.com/user-attachments/assets/d0fbad20-e890-4901-b39f-1ebc3aaae5d2)\n",
    "type": "issue"
  },
  {
    "id": 2987294795,
    "number": 277,
    "title": "[FEATURE]管理画面でCSVをアップロードしたとき、エラーで落ちても進捗状況を自動更新する",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/277",
    "user": "masatosasano2",
    "created_at": "2025-04-11T01:04:01Z",
    "closed_at": "2025-04-11T11:30:41Z",
    "body": "# 背景\n正常に動作するとstep1(抽出)からstep8(可視化)まで自動更新され、その後レポートのURLが表示されるが、\nエラーで落ちると進捗が更新されず、ページを再読込して初めてエラーになったことが可視化される。\n\n実際に発生したケース：OpenAPIのクレジットが足りず初手の抽出で落ちた。\n正確な発生条件：未調査\n\n# 提案内容\n`client-admin/app/page.tsx` で `useReportProgressPoll` の結果が \"completed\" の場合にページがリロードされているが、 \"error\" の場合の処理も必要そう。",
    "type": "issue"
  },
  {
    "id": 2981550740,
    "number": 268,
    "title": "[FEATURE]adminのレポート一覧画面にも作成日時を追加する",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/268",
    "user": "nasuka",
    "created_at": "2025-04-09T05:09:39Z",
    "closed_at": "2025-04-11T05:24:26Z",
    "body": "# 背景\n* client側ではレポート一覧画面で作成日時が表示されるようになったが、adminでは表示がされない\n  * client側のPR: https://github.com/digitaldemocracy2030/kouchou-ai/pull/245\n\n\n# 提案内容\n* client側と同様、admin側でも一覧画面で各レポートの作成日時を表示する",
    "type": "issue"
  },
  {
    "id": 2974877378,
    "number": 243,
    "title": "初期設定時のentrypoint.shエラー",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/243",
    "user": "nasuka",
    "created_at": "2025-04-06T11:02:11Z",
    "closed_at": "2025-04-16T04:17:52Z",
    "body": "## バグの内容\n初期設定時にentrypoint.shエラーが出たため、ChatGPTに解決策を聞いたものとなります。\nhttp://localhost:3000/　http://localhost:4000/のページは見れるようになりました。\n環境がWindows10で、PowerShell 5.xです。\n\n【エラー内容①】\nclient-1 exited with code 0\n/entrypoint.sh: line 5: syntax error: unexpected \"fi\" (expecting \"then\")\n\n●エラーの意味：\nclient（レポート表示画面）の起動時に、entrypoint.sh という起動スクリプトの中に文法ミスがあります\n\n正確には：\nif 文が書いてあるけど、その中に then がない\nそのまま fi（if の終わり）に到達して、エラーになってる\n\n●修正案１（？）\nif [ \"$NODE_ENV\" = \"production\" ]; then\n  npm run start\nelse\n  npm run dev\nfi\n\n●修正案２（？）\n#!/bin/sh\n# 起動時に全て削除した上でbuildしなおす\nif [ -d \".next\" ]; then\n  rm -rf .next\nfi  \n\n# build時にAPIサーバーを参照するため、APIサーバーの起動を待ってからbuildを行う\nnpm run build\nexec npm run start\n\n●修正案３（？）\nWindowsメモ帳が改行コードをCRLF（\\r\\n）にしてしまうせいで、Docker内で「: not found」や syntax error: unexpected \"fi\" が出る。\n✅ 対処方法（メモ帳ユーザーでもOK）\nPowerShellで改行コードをLFに変換する（推奨）\n以下を PowerShell で kouchou-ai フォルダ内で実行：\n＜PowerShell＞\n手順１（PowerShell 7.x対応）\ncd ~\\kouchou-ai\n(Get-Content .\\client\\entrypoint.sh) -join \"`n\" | Set-Content -NoByteOrderMark -Encoding utf8 .\\client\\entrypoint.sh\n\n手順１修正版コマンド（PowerShell 5.x対応）\n(Get-Content .\\client\\entrypoint.sh) -join \"`n\" | Set-Content -Encoding UTF8 .\\client\\entrypoint.sh\n手順２\ndocker-compose down\ndocker-compose up --build\n\n\n\n\n\n\n【エラー内容②】\nclient-1 | ./entrypoint.sh: line 1: ﻿#!/bin/sh: not found\nこの「﻿」は見えないBOM文字。Windowsのメモ帳で保存した .sh ファイルはUTF-8 with BOMになりやすい。\n手順１：entrypoint.sh の最初の行のBOMを完全に除去する\n●修正案②ー１（PowerShell 7.x対応）\nGet-Content .\\client\\entrypoint.sh | Out-File -Encoding ASCII -NoNewline .\\client\\entrypoint.sh\n●修正案②ー２（PowerShell 7.x対応）\nGet-Content .\\client\\entrypoint.sh | Set-Content -Encoding UTF8 -NoByteOrderMark .\\client\\entrypoint.sh\n●修正案②ー３（PowerShell 5.x対応）\n[System.IO.File]::WriteAllLines('.\\client\\entrypoint.sh', [System.IO.File]::ReadAllLines('.\\client\\entrypoint.sh'), (New-Object System.Text.UTF8Encoding($false)))\n\n\n手順２：フルリセットして再起動\ndocker-compose down --volumes --remove-orphans\ndocker-compose build --no-cache\ndocker-compose up\n\n\n---\nこちらのイシューはGoogle Form経由で投稿されたものです",
    "type": "issue"
  },
  {
    "id": 2974667369,
    "number": 241,
    "title": "[FEATURE]おすすめクラスタ数設定機能",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/241",
    "user": "nishio",
    "created_at": "2025-04-06T03:54:15Z",
    "closed_at": "2025-04-09T05:05:28Z",
    "body": "# 背景\n<!-- なぜその機能が必要なのか、何が改善されるのか具体的に記入してください -->\n\n>yuneko\n意見グループ数(クラスタ数)をどのくらいで試せばいいのか、目安が知りたいです。この件数(列数)だとまずこれにするといいよというのがわかると、お試しで自分のデータを試したときに、うまく行ったなという感覚になりやすい気がします。\nNISHIO Hirokazu\n模索段階ではあるんですけど漠然と思ってることとしては、データが1000件あるなら10→100にするのが良さそうという感じです\n8000件だったら20→400、125件だったら5→25\n∛1000=10ということです。\nその理屈でいうとサンプルの400件のデータは7→50がいい気がしましたが、今の5→50と7→50に変えたのとでどちらが良いのかを雰囲気ではなくちゃんと科学的根拠を持って言えるようになるといいなぁと思ってて、その研究の緊急度が低くて放置されていますw\nyuneko\nいいレポートを明らかに評価できると嬉しいですね。(嬉しいけど放置はされそう)\nヒューリスティクスでも少し評価できるなら、一定の初期値で固定しておくより、できるならコメントの件数によって勝手にクラスタ数を変更する(例えば∛の切り捨てとか)にした方がユーザーフレンドリーかもと思いました。もしくは、おすすめクラスタ数を選択したら、勝手にいい感じのクラスタ数に変更するなど。\n\n# 提案内容\n<!-- 実装案やデザイン案があれば記入してください -->\n\n案0: READMEに書く\n\n案1: CSVアップロード後に「おすすめクラスタ数設定 7→50 [button: この設定にする]」みたいな表示を出す\n \n問題点\n- Google Spreadsheetから読むのってクライアントサイドだったかな... サーバサイドで読むまでデータ量がわからないのだとするとこの方法では無理\n- 一旦Google Spreadsheetは無視すると言うのも手\n\n案2: パラメータを変えて再分析する機能ができた後なら、前の分析の情報を使っておすすめを出すことができるかも？",
    "type": "issue"
  },
  {
    "id": 2966961605,
    "number": 222,
    "title": "[FEATURE]クラスタ数変更を直接入力可能にする",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/222",
    "user": "nishio",
    "created_at": "2025-04-02T16:27:55Z",
    "closed_at": "2025-04-09T05:05:47Z",
    "body": "# 背景\n\n<img width=\"302\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/257a3fed-faab-4e86-ba90-8fd6c3126f42\" />\n\nデータが8000件とかある場合、20 > 400 とかにしたくなるわけだけど、現状では350回のクリックが必要では\n\n# 提案内容\n\nクラスタ数変更を直接入力可能にする",
    "type": "issue"
  },
  {
    "id": 2965108490,
    "number": 218,
    "title": "[FEATURE]レポート一覧に作成日時を追加する",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/218",
    "user": "ei-blue",
    "created_at": "2025-04-02T03:55:52Z",
    "closed_at": "2025-04-09T05:07:28Z",
    "body": "# 背景\n現状、レポート一覧ではレポート名でしか区別がつけられないが、\n- 同じ内容で複数回レポートを作成と区別がつかない\n- 作成したレポートがいつ時点までのアップデートを反映したものかわからない\n\nため、レポート作成日時があると便利なのではと思いました。\n\n# 提案内容\n以下は一案です。\n\n- レポート作成時にreport_status.jsonに日時を追加\n- レポート一覧ページでタイトルの下に日時を表示\n",
    "type": "issue"
  },
  {
    "id": 2927036222,
    "number": 84,
    "title": "[REFACTOR] フロントエンドのコードを Biome でフォーマットをする",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/84",
    "user": "shgtkshruch",
    "created_at": "2025-03-18T03:59:30Z",
    "closed_at": "2025-04-10T02:02:16Z",
    "body": "# 現在の問題点\n<!-- 現在のコードの何が問題なのか、どのような技術的負債があるかを説明してください -->\n\n- この issue のスコープとしては、フロントエンドに関わる client, client-admin, utils/dummy-server を想定しています\n- コードの formatter が導入されていないため、開発者によってコードの書き方（ex. 改行、スペースの入れ方）に差分出てくる可能性がある\n\n# 提案内容\n<!-- どのようなリファクタリングを提案するのか、具体的に説明してください -->\n- フロントエンドで広く利用されている [prettier](https://prettier.io/) を導入して、コードのフォーマットを自動化する\n  - 一部 ESLint でフォーマットのチェックをしているところも prettier に寄せたい気持ちです\n    https://github.com/digitaldemocracy2030/kouchou-ai/blob/c0a10e33f3f0ea458525a19a55a887b3f3f4792b/client/eslint.config.mjs#L16-L20\n    https://github.com/digitaldemocracy2030/kouchou-ai/blob/c0a10e33f3f0ea458525a19a55a887b3f3f4792b/client-admin/eslint.config.mjs#L16-L20\n  https://github.com/digitaldemocracy2030/kouchou-ai/blob/c0a10e33f3f0ea458525a19a55a887b3f3f4792b/utils/dummy-server/eslint.config.mjs#L16-L20\n- pre-commit or pre-push hook などで prettier を実行する仕組みを導入して、フォーマットされたコードが GitHub に push されるようにする\n  - これを実現するツールとしては [husky](https://github.com/typicode/husky) や [lefthook](https://github.com/evilmartians/lefthook) などがありますが、個人的には実行のパフォーマンスと設定のシンプルさから lefthook が良いかなと思っています",
    "type": "issue"
  },
  {
    "id": 2922748191,
    "number": 54,
    "title": "[FEATURE] GoogleAnalytics 対応",
    "state": "closed",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/54",
    "user": "nanocloudx",
    "created_at": "2025-03-16T03:47:30Z",
    "closed_at": "2025-04-09T08:00:14Z",
    "body": "# 背景\nレポートがどれくらい表示されたのかなど統計を知りたいニーズがありそう\n\n# 提案内容\nトラッキングIDを環境変数で指定した場合は、必要なスクリプトが読み込まれるようにする\n",
    "type": "issue"
  },
  {
    "id": 2995192689,
    "number": 310,
    "title": "[FEATURE] LLMが出力した結果の手動修正機能がほしい",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/310",
    "user": "nasuka",
    "created_at": "2025-04-15T05:38:53Z",
    "body": "# 背景\n* LLMが出力したクラスタ名や説明、argumentが適切でない場合がある\n  * e.g.\n    * 公開するのに不適切な単語や表現がクラスタ名に含まれている\n    * 他のクラスタと同一の内容がクラスタ名に含まれている\n* このようなケースにおいては、LLMのアウトプットを見た後に人間が手動で文言を修正したい\n\n# 提案内容\nLLMが出力したテキスト（クラスタタイトル・説明・概要・argument）について、手動で編集する画面をadminに設け、レポートに編集内容を反映する\n\n\n(admin)\n* 上記の編集画面を設ける\n  * 編集後のデータを編集用のendpointに送る\n\n(api)\n* 編集用のendpointを実装する\n  * リクエストで受け取ったデータを各種中間ファイル（args.csv等）に保存\n  * hierarchical_aggregation.pyを再度実行し、更新後のデータでhierarchical_result.jsonを保存する\n\nそもそも全要素を編集できるようにするかというのは議論の余地がある。やるとしても、まずはクラスタ名のみを対象にするなど、部分的に始めていくのが良さそう。\nまた、透明性担保のために編集履歴を残すようにするかも議論の余地がある。",
    "type": "issue"
  },
  {
    "id": 2994589288,
    "number": 308,
    "title": "[FEATURE] HTML フォーム入力による広聴 AI システムの簡易デプロイ機能",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/308",
    "user": "shingo-ohki",
    "created_at": "2025-04-15T00:11:32Z",
    "body": "# 背景\n\n先日のハッカソンに参加して、改めて広聴 AI の導入について技術的なハードルの高さとその導入サポートにに課題がありそうだと感じました。\n\n#300 によって Windows 環境でのセットアップは大きく改善されますが、\n- PC へのソフトウェアインストール自体が難しい場合もある\n- Azure 環境の構築に make コマンドが必要（WSL2 などのセットアップ含む）\n\nといった点が、導入の障壁として残っている（そこまで現段階で対応するかどうかは議論の余地あり）と考えています。\n\n# 提案内容\n\n## 概要\nHTML フォーム + Azure Functions（または Azure に限らず同等のことが実現できる環境） のセットを提供することで、ユーザーがフォームに必要な情報（Azure 認証情報、OpenAI API キーなど）を入力するだけで、自動的に自身の Azure 環境上に広聴 AI の環境を構築できる仕組みを提供します。\n\n## 想定構成\n\n![Image](https://github.com/user-attachments/assets/cab67945-f74a-49d6-8650-88249f766d57)\n\n- static form(HTML フォーム)\n  - Azure Storage の Static Web Hosting に設置\n  - 必要な認証情報や設定項目を入力\n- Azure Functions\n  - 入力された情報をもとに、Azure 上に必要なリソース（Container Apps 等）を作成・デプロイ\n\n※フォームと Functions はセットで提供され、ユーザー操作は基本的にフォーム入力のみで完結\n\n## 構築される環境\n- 広聴 AI のシステム（Azure Container Apps による server, client, client-admin 構成）\n- 利用料金はユーザーの Azure アカウントにて発生\n- Static HTML と Azure Functions はプロジェクト側または第三者がホスティング（マネージドサービスかつ無料枠の想定、要検証）\n\n# 利点\n- PC 操作に不慣れな方でも数ステップで導入が可能\n- コマンド操作・ローカル環境構築が不要\n- ユーザーごとの環境依存によるトラブル発生率の低下\n- 実証実験・テスト環境など、導入コストを下げたい場面での展開が容易\n- サポート負担の軽減\n\n# 懸念点・検討課題\n- そもそもこのニーズはあるか？今やるべきか？\n- フォーム経由で機微情報（Azure 認証情報、OpenAI API キーなど）を扱うこと\n- Azure アカウントの事前取得が必要\n- Static HTML + Azure Functions をプロジェクトとしてホスティングできるか？",
    "type": "issue"
  },
  {
    "id": 2991203616,
    "number": 306,
    "title": "[FEATURE]「全体図」「濃い意見グループ」のUI/UX改善",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/306",
    "user": "masatosasano2",
    "created_at": "2025-04-13T11:20:06Z",
    "body": "# 背景\n\n操作しててたまたま以下に気づいたが、見ただけでは分からない。\n・範囲指定（ドラッグ）すると拡大できること\n・拡大した状態から元の倍率に戻すにはダブルクリックすること\n\n# 提案内容\n\nズームイン/アウトのUIがあるとよさそう\n",
    "type": "issue"
  },
  {
    "id": 2991108744,
    "number": 305,
    "title": "[FEATURE]CSVアップロード時にタイトルや説明文を自動で埋めてほしい",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/305",
    "user": "masatosasano2",
    "created_at": "2025-04-13T07:45:30Z",
    "body": "# 背景\n入力の一手間を減らしたい\n入力漏れでエラーにならないでほしい\n\n# 提案内容\n- タイトルと説明文を optional にする\n- 空の場合にCSVの内容から自動生成する　※説明文は必須でないかも",
    "type": "issue"
  },
  {
    "id": 2991091837,
    "number": 304,
    "title": "[FEATURE]CSVアップロード時にコメント列を自動で特定してほしい",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/304",
    "user": "masatosasano2",
    "created_at": "2025-04-13T06:59:09Z",
    "body": "# 背景\nコメント列の指定の一手間を減らしたい\n\n# 提案内容\n- コメントの列名が「コメント」「comment」「意見」「要望」「投稿」などであったらデフォルトでその列を指定してほしい\n- 候補の列名はハードコードで一定カバーし、マッチしなかったらLLMに一番それっぽいのを選んでほしい\n- 列が1つしかなかったらそれをコメント列と判定してほしい\n- 数値/日付型でない列が1つしかなかったらそれをコメント列と判定してほしい",
    "type": "issue"
  },
  {
    "id": 2991091474,
    "number": 303,
    "title": "[FEATURE]CSVアップロード時にデフォルトでクラスタ数が設定されてほしい",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/303",
    "user": "masatosasano2",
    "created_at": "2025-04-13T06:58:07Z",
    "body": "# 背景\nクラスタ数の設定の一手間を減らしたい\n\n# 提案内容\n- クラスタ数について「この設定にする」を押さないと推奨設定通りにならず、そのことが詳細画面を開かないとわかりにくい\n- クラスタ数のデフォルト値より小さい件数のCSVを取り込んだ時、先に進もうとするとアラートが出てくれるのは嬉しいが、それなら最初から推奨設定をセットして欲しい\n",
    "type": "issue"
  },
  {
    "id": 2991086810,
    "number": 302,
    "title": "[FEATURE]「公開」ボタンを押した時の効果を分かりやすくする",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/302",
    "user": "masatosasano2",
    "created_at": "2025-04-13T06:51:12Z",
    "body": "# 背景\nキャプションが「公開」の状態のボタンを押すと非公開になり、「非公開」の状態のボタンを押すと公開になる。\nキャプションの意味は現在の状態であってボタンを押した時に発生するアクションではないので間違ってはいないのだが、\nclient-adminでもclientでも大抵のボタンのキャプションは押した時のアクションに近いので、やや紛らわしい。\n\n# 提案内容\n- 案1：マウスオーバー中のみ「非公開にする」「公開にする」などのヒントを表示する\n- 案2：マウスオーバー中のみ逆の状態の見た目にする\n- 案3：ボタンからスイッチに変える\n- 案4：ボタンからチェックボックスに変える　＊この場合、「非公開にする」チェックの方が自然かも",
    "type": "issue"
  },
  {
    "id": 2990962155,
    "number": 300,
    "title": "[FEATURE]Windowsユーザの利用環境構築",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/300",
    "user": "nishio",
    "created_at": "2025-04-13T03:36:08Z",
    "body": "# 背景\n\nWindowsユーザーがkouchou-aiを利用する際、現在は複数のセットアップ方法（WSL2+Docker、Docker単体、生環境）があり、開発者ではなくただ使いたいユーザーにとって環境構築が難しい状況です。特に環境変数の設定やパスの問題が発生しやすく、環境ごとの違いが多くてトラブルシューティングも困難です。\n\n# 提案内容\n\nDocker-outside-of-Docker（DooD）方式を使用して、Windowsユーザー向けのセットアップを簡素化します。\n\n## ユーザストーリー\n- Docker Desktopをインストール\n- zipでrepoをダウンロード\n- OpenAI APIキーを取得して$5くらいチャージする\n- setup_win.batを実行\n- ブラウザでアクセス可能になる\n\n## 実装方法\nsetup_win.batがDocker環境内にUbuntuコンテナを作成し、その後の作業は全てDocker内で実行します。具体的には：\n\n1. OpenAI APIキーの入力プロンプトを表示\n2. 環境変数を自動設定\n3. docker composeでサービスを起動\n\n## メリット\n- WSL2の複雑な設定が不要\n- 環境変数の問題を回避\n- Windowsの環境の違いによる問題を解消\n- コマンドラインの知識が不要\n\n## 技術的詳細\n- ホストのDockerソケットをマウント（/var/run/docker.sock）\n- 必要なポート（3000, 4000, 8000）をマッピング\n- 環境変数を適切に設定\n\nこれにより、Windowsユーザーでも簡単にkouchou-aiを利用できるようになります。\n",
    "type": "issue"
  },
  {
    "id": 2990925334,
    "number": 297,
    "title": "[FEATURE]CSVダウンロード時の文字化け (Windows)",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/297",
    "user": "nishio",
    "created_at": "2025-04-13T01:36:52Z",
    "body": "# 背景\nAdmin DashboardからレポートデータをCSV形式でダウンロードすると、WindowsのExcelなどで開いた際に文字化けが発生する。\n\n「Dashboard reportsのCSVファイルをダウンロードしたら、Windowsでは文字化けする」\n\n\n# 提案内容\n(解決策) CSVファイルを生成する際に、文字コードをUTF-8 BOM (Byte Order Mark) 付きで出力するなどのオプションを選択可能にする。\n\n",
    "type": "issue"
  },
  {
    "id": 2990914996,
    "number": 296,
    "title": "[FEATURE]LLM出力形式の揺らぎによる抽出エラー",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/296",
    "user": "nishio",
    "created_at": "2025-04-13T01:22:24Z",
    "body": "# 背景\nLLMからの応答が、プロンプトで期待したJSON形式（例: 文字列リスト [str]）と異なる形式（例: オブジェクトリスト [{“意見”:str, “トピック”:str}]）で返ってくることがあり、データ抽出が失敗したり、抽出される意見数が少なくなったりする。\n\n「Rate limitかと思われた抽出データが少ない事例の一つにおいて、JSON List[str]ではなく[{“意見”:str, “トピック”:str}]が返っていたせい(nishio)」\n「これのせいで抽出されるデータが減るのは困るし、それに多分ユーザは気づけなくて「こんなもんか〜」となりそう」\n\n# 解決策\n\nプロンプトを改善し、出力形式の指示をより明確かつ堅牢にする。\n\nLLMからの応答をパースする際に、期待する形式以外もある程度許容する、またはエラーハンドリングを強化して異常を検知できるようにする。",
    "type": "issue"
  },
  {
    "id": 2990911889,
    "number": 295,
    "title": "OpenAI API Rate Limit関連の問題",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/295",
    "user": "nishio",
    "created_at": "2025-04-13T01:19:38Z",
    "body": "## 課題\n\n広聴AIのレポート生成プロセスにおいて、OpenAI API の Rate Limit (利用制限) に起因する問題が複数発生しています。\n\n1.  **Rate Limit によるエラー頻発 (特にTier1ユーザー):**\n    *   OpenAI API を使い始めたばかりのユーザー (Usage tier が Tier 0 や Tier 1) は、分間あたりのリクエスト数 (RPM) やトークン数 (TPM) の制限が非常に厳しいです。\n    *   そのため、数百件程度のコメントデータであっても、レポート生成中に RateLimitError (HTTPステータスコード 429) が頻発し、処理が遅延したり失敗したりします。\n    > 「OpenAI始めたばかりだとTier1問題」\n    > 「300コメント程度でもrate limitが出る」\n    > (大量のRateLimitErrorログ引用: `ERROR:root:Task ... failed with error: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4o-mini ...` )\n\n2.  **Rate Limit エラー発生時の不完全なレポート生成:**\n    *   現在の実装では、Rate Limit エラーが発生しても、処理は停止せず続行されます。\n    *   リトライが上限に達した場合、該当部分のデータ取得（例: クラスタラベルの生成）がスキップされ、結果として一部の情報が欠落した「不完全なレポート」がエラー表示なく生成されてしまうことがあります。\n    *   ユーザーは、Rate Limit が原因であることや、レポートが不完全であることに気づきにくい状態です。\n    > 「エラーでラベル名が取得できませんでしたが複数現れた」\n    > 「今回のケースでは、ラベル名のみ生成に失敗していた」\n    > 「rate limit errorが出るもののうごいているので、処理は正常にされたと思っていましたが、どうやらリトライされず一部エラーになったまま処理が終了されちゃったみたいです」\n    > 「中途半端に抽出されたレポートができるのは不適切なので、rate limitの時にエラーとしてスルーしないようにする必要がある(nishio)」\n\n## 解決策案\n\n**1. Rate Limit エラー頻発への対策:**\n\n*   **指数バックオフ付きリトライ処理の実装:** API呼び出し部分で RateLimitError (429) を検知した場合、待機時間を指数関数的に増やしながら、複数回（上限を設定して）API呼び出しを再試行する処理を実装します。\n*   **ドキュメントでの周知:** README などに以下の情報を記載します。\n    *   OpenAI API の Rate Limit の存在と Tier システムについて。\n    *   自分のアカウントの Tier と Limit を確認する方法（OpenAI Platform の設定画面へのリンク）。\n    *   Tier を上げるための条件（例: 一定額の支払いと利用期間）と公式ドキュメントへのリンク。「Rate limits - OpenAI API」「RateLimitError | OpenAI Help Center」\n*   **(検討) 代替APIへの対応:** OpenRouter など、Rate Limit が比較的緩い、または管理しやすい API サービスへの対応を検討します。「OpenRouter APIにするのも候補の一つ。」\n*   **(検討) 意図的な待機時間の挿入:** API リクエスト間に短い sleep を入れることで、瞬間的なリクエスト集中を緩和します。\n\n**2. 不完全なレポート生成の防止:**\n\n*   **エラーハンドリングの強化:** Rate Limit エラーが発生し、上記のリトライ処理を行っても成功しない場合は、**処理をスキップせずにレポート生成プロセス全体を明確なエラーとして中断・失敗させる**ように修正します。これにより、ユーザーは問題発生を確実に認識でき、不完全なデータが出力されることを防ぎます。\n    *   リトライ回数には上限を設定し、無限ループ（や無限課金）を防ぎます。「無限リトライはしないので(元データがおかしい時に無限にお金を使う)3回くらい試して先に進んでるかと(nishio)」",
    "type": "issue"
  },
  {
    "id": 2990889159,
    "number": 294,
    "title": "[FEATURE]ラベルが多い時の重なりの問題",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/294",
    "user": "nishio",
    "created_at": "2025-04-13T00:59:47Z",
    "body": "## 課題\n\n広聴AIのレポート画面に表示されるプロットグラフにおいて、分析によって生成されたクラスタ（意見グループ）の数が多い場合に、各クラスタを示すラベルが互いに重なり合ってしまい、判読が困難になるという問題があります。\n\n特に、自治体での利用など、詳細な分析のためにクラスタを細かく分ける傾向がある場合に、この見にくさが顕著になります。\n> 「自治体的には、クラスタを細かく分ける方向の議論が強い。」\n> 「UIの観点で、プロットグラフがそれに対応していけるとよさそう。」\n> 「ラベルは重なって見にくくならないようにできるとか」\n\n現状のままでは、せっかく詳細に分類された意見グループの内容を、グラフ上で直感的に把握することが難しくなっています。\n\n## 解決策案\n\nグラフ上でのラベルの重なりを軽減し、視認性を向上させるために、以下のいずれか、または組み合わせによる改善策を検討します。\n\n*   **ラベル表示の選択的ON/OFF:** ユーザーが表示したいラベルを選択したり、一定数以上のラベルはデフォルトで非表示にする機能を追加する。\n    > 「ラベル全部は表示しない設定」\n*   **重なり回避アルゴリズムの導入:** ラベルの位置を自動的に調整し、重なりを最小限に抑えるアルゴリズムを実装する。\n*   **インタラクティブなラベル操作:** ユーザーがグラフ上でラベルをドラッグ＆ドロップして任意の位置に移動できるようにする。\n*   **ズームレベルに応じた表示制御:** グラフの拡大率に応じて、表示するラベルの数を調整する（例: 縮小時は主要なラベルのみ表示）。",
    "type": "issue"
  },
  {
    "id": 2990887157,
    "number": 293,
    "title": "[FEATURE]レポート表示画面上で、使用したプロンプトを直接編集可能にする",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/293",
    "user": "nishio",
    "created_at": "2025-04-13T00:58:21Z",
    "body": "## 課題\n\n現在、生成された広聴AIレポートの内容（特に要約文言など）に不満があり修正したい場合、以下の手順を踏む必要があり、手間と時間がかかります。\n\n1.  Admin Dashboard画面に戻る。\n2.  対象のレポートを探して複製する。\n3.  複製したレポートの設定（主にプロンプト）を調整する。\n4.  再度レポート生成を実行する。\n\n> 「ユーザーとして、広聴AIレポート画面で出力された成果物に不満があり作り直したい場合に、手間と時間がかかる（Admin Dashboard画面に戻り、レポートを複製し、文言調整を行う。1度の修正ごとにレポートが1枚のレポートを生成する必要がある）」\n\n特に、プロンプトの微調整を繰り返して最適な出力結果を得たい場合、この往復作業は大きな負担となります。\n\n## 提案\n\nレポート表示画面（例: `http://localhost:5173/reports/{report_id}`）に、そのレポート生成に使用されたプロンプトを表示し、**直接編集および更新（再生成）** できる機能を追加します。\n\n**具体的な流れ:**\n\n1.  レポート表示画面の下部など（例: 現状「分析手順」が表示されている箇所）に、編集可能なプロンプト入力欄を表示する。\n2.  ユーザー（※後述の権限者のみ）がプロンプトを編集する。\n3.  「更新して再生成」のようなボタンをクリックすると、編集後のプロンプトを使用してレポートの再生成処理が開始される。\n4.  レポート表示画面が更新され、新しい結果が表示される。\n\nこれにより、Admin Dashboardに戻ることなく、試行錯誤しながらレポートの質を効率的に向上させることが可能になります。（参考: TTTCTurboのレポート画面における同様の機能）\n> 「TOBE：利用したプロンプトを編集、更新できる（参考TTTCTurboのレポート画面）」\n\n## 考慮事項\n\n*   **権限管理:** 広聴AIでは、レポートの作成権限を持つユーザーと閲覧権限のみを持つユーザーが存在する想定です。プロンプトの編集・再生成機能は、**レポート作成権限を持つユーザーのみ**が利用できるように制限する必要があります。閲覧権限のみのユーザーには、プロンプトの表示は行うかもしれませんが、編集・再生成ボタンは表示しない、または無効化するなどの制御が必要です。\n*   **コスト:** レポートの再生成にもLLM APIのコストが発生するため、実行前に確認を促すなどのUI上の配慮が必要になる可能性があります。\n*   **UI/UX:** プロンプト編集エリアのデザイン、再生成中のステータス表示方法などを検討する必要があります。\n",
    "type": "issue"
  },
  {
    "id": 2990880118,
    "number": 292,
    "title": "[DOCUMENT]OpenAI APIの課金設定に関する混乱",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/292",
    "user": "nishio",
    "created_at": "2025-04-13T00:52:56Z",
    "body": "# 現在の問題点\n非エンジニアにとって、OpenAI APIキーの取得と課金設定（クレジット購入）が必要であることが分かりにくく、ChatGPT Plusと混同しやすい。設定不備によりQuota超過エラー (429) が発生する。\n\n「OpenAIの課金の設定してなかった」\n「Error code: 429 - 'You exceeded your current quota, please check your plan and billing details.'」\n「非エンジニアの場合、環境を設定した際にOpenAI APIに課金するというステップがわからない(たねのぶ)」\n「OpenAIに課金=ChatGPT Plusだと思う人もいる」\n\n# 提案内容\n<!-- どのようなリファクタリングを提案するのか、具体的に説明してください -->\n(解決策) READMEに、OpenAI APIキーの取得手順と、ChatGPT Plusとは別にAPI利用のためのクレジット購入（支払い方法登録）が必要であることを明記する。Quota超過エラーの意味と対処法も説明する。\n",
    "type": "issue"
  },
  {
    "id": 2990878839,
    "number": 291,
    "title": "[DOCUMENT].envファイルの不可視問題 (Mac Finder)",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/291",
    "user": "nishio",
    "created_at": "2025-04-13T00:51:49Z",
    "body": "# 現在の問題点\nMacのFinderでは .env ファイルがデフォルトで非表示のため、cp example.env .env を実行した後、ファイルを見つけられないユーザーがいる。\n\n「.env見つからない」\n「Sampleからコピーしてきたとき、それをVScodeで開こうとするときに見つからない」\n「隠しファイルをfinderで開こうとしていた」\n\n\n# 提案内容\n\nREADMEで、FinderではなくVSCodeなどのエディタでプロジェクトフォルダを開いて .env ファイルを編集することを推奨する。「実はFinder経由でどうこうするよりVSCodeでフォルダを開いてしまうほうが良かった」\n",
    "type": "issue"
  },
  {
    "id": 2990876385,
    "number": 290,
    "title": "[FEATURE]階層図のUI/UX改善",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/290",
    "user": "nishio",
    "created_at": "2025-04-13T00:49:58Z",
    "body": "# 背景\n階層図の操作性や情報表示に改善の余地がある (クリック操作の分かりにくさ、表示リセット、親子関係不明瞭、命名規則、戻るボタン欠如)。\n\nfrom 4/12 meetup\n>「階層図のギミックを確認、初見でクリックによって深層に移動できることがわからなかった。」\n「全体図、濃い意見グループ、階層図を行き来するときに階層図の表示がリセットされなくなるとうれしい。」\n「濃い意見グループで上がってきているクラスタが第一階層？のクラスタのどれに属すのかがわかるとうれしい。」\n「階層図の第一階層？第二階層の名前が決まっていると嬉しい。」\n「「１階層前に戻る」ボタンがあると助かります」\n\n# 提案内容\n(解決策) クリック操作のガイド表示、表示状態の保持、親子関係の明示（例: パンくずリスト）、階層命名規則の明確化、戻るボタンの追加など、UIを改善する。\n",
    "type": "issue"
  },
  {
    "id": 2990845213,
    "number": 289,
    "title": "[FEATURE]exe形式での配布によるインストール簡略化",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/289",
    "user": "nishio",
    "created_at": "2025-04-13T00:24:58Z",
    "body": "# 背景\n<!-- なぜその機能が必要なのか、何が改善されるのか具体的に記入してください -->\n現状の広聴AIはDockerとGitの知識・インストールが前提となっており、特にITスキルやセキュリティ制限のある自治体ユーザーにとっては導入のハードルが高い。\n\n>「Dockerのインストールが認められてない（情シス部門の理解が必要）」「自治体関係者の中でのアーリーアダプターたちが試す際に、最初の①リポジトリをクローン」段階で既にかなり大きなハードルになっている。」\n\n# 提案内容\n<!-- 実装案やデザイン案があれば記入してください -->\n\n(解決策案) アプリケーションを単一の実行ファイル（.exe形式）にパッケージ化し、DockerやGitのインストール、コマンドライン操作を不要にすることを検討する。\n\n>「exe化は難しいだろうか？(たねのぶ)」。\n\nこれにより、ダブルクリック等で簡単に起動でき、非エンジニアやセキュリティ制限のある環境でも利用しやすくなる可能性がある。ただし、技術的な実現可能性や配布ファイルサイズなどの課題も考慮する必要がある。\n\n\n(nishioコメント) DockerやGitを「インストールできるが難しい」のケースには有効かも。「Dockerのインストールが認められてない」の場合、広聴AI.exeが作られたところでそれのインストールが認められないのではという気がする。",
    "type": "issue"
  },
  {
    "id": 2990833717,
    "number": 288,
    "title": "[FEATURE]zipでのリリース",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/288",
    "user": "nishio",
    "created_at": "2025-04-13T00:14:59Z",
    "body": "# 背景\nDocker/Gitのインストール障壁 (特に自治体ユーザー)\nセキュリティポリシーやITスキル不足により、DockerやGitのインストール自体が大きなハードルとなっている。\n「リポジトリ」などのIT専門用語が、非エンジニアのユーザーにとって理解しにくい。\n\n>「自治体関係者の中でのアーリーアダプターたちが試す際に、最初の①リポジトリをクローン」段階で既にかなり大きなハードルになっている。」\n「Dockerのインストール、Gitのインストールという部分で既にわけがわからなくなっている。」\n>「リポジトリ」概念を避けて行政に納品する際は、zip圧縮などをしたりします。\n> 「非エンジニアユーザー向けに、GitをインストールせずにZIPダウンロードで運用のほうがよい？(たねのぶ)」\n\n# 解決策\n\nzipでリリースすればgit cloneの部分の解説は必要なくなる\n",
    "type": "issue"
  },
  {
    "id": 2990818818,
    "number": 287,
    "title": "[DOCUMENT]Windows向けのセットアップ手順",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/287",
    "user": "nishio",
    "created_at": "2025-04-13T00:02:52Z",
    "body": "# 現在の問題点\n<!-- 現在のコードの何が問題なのか、どのような技術的負債があるかを説明してください -->\n\n## 課題\n\n現在の `README.md` は主にUNIX系（Linux, macOS）環境を前提としており、Windowsユーザーが広聴AIをセットアップする際に特有の課題に直面することが多いです。\n\n*   **必須ツールのインストールと設定:** Docker DesktopやGit for Windowsのインストール、特に環境変数Pathの設定 (`'git' は、内部コマンドまたは外部コマンド...`) やWSL連携で躓く可能性がある。\n*   **改行コードの問題:** クローン時に適切に対応しないと、シェルスクリプト (`entrypoint.sh`) 実行時にエラーが発生する。\n*   **コマンドの違い:** `cp` コマンドなど、コマンドプロンプトとPowerShellでの違いに戸惑う可能性がある。\n*   **隠しファイル:** `.env` ファイルがデフォルトで非表示のため、作成・編集時に混乱が生じやすい。\n*   **Docker関連のエラー:** `npm ci` エラー、ポート競合 (`port is already allocated`)、証明書エラーなど、Windows環境固有または頻出する可能性のあるエラーへの対処法が不明確。\n\nこれらの問題により、特に非エンジニアやITスキルに不安のあるWindowsユーザーにとって、導入のハードルが高くなっています。「WindowsユーザーはDocker Desktopのダウンロードからはじまる」「GithubのREADMEは現在UNIX系前提?」「'git' は、内部コマンドまたは外部コマンド...」「パスを通すという困難な作業」「entrypoint.shの5行目でエラー。改行コードの関係」「.env見つからない」「Powershellでないとないかも。cmdではない」\n\n## 提案\n\nWindowsユーザー向けの専用セットアップガイドを `README.md` に追記、または別ドキュメントとして作成する。\n\n**含めるべき内容:**\n\n1.  **必要なソフトウェア:**\n    *   Docker Desktop (インストール方法、wingetコマンド例、注意点: セキュリティポリシー、WSL/ログインエラー)\n    *   Git for Windows (インストール方法、wingetコマンド例、**Path設定の重要性**、確認方法)\n    *   (推奨) テキストエディタ (VSCodeなど)\n2.  **セットアップ手順:**\n    *   リポジトリのクローン (**`--config core.autocrlf=false`** オプションの明記)\n    *   `.env` ファイルの作成 (Windowsコマンド: `copy` / `cp`、**隠しファイル問題**とVSCodeでの編集推奨)\n    *   アプリケーションの起動 (**`docker compose up`** コマンドの明記、初回ビルド時間について)\n3.  **よくある問題と対処法 (Windows向け):**\n    *   `git` コマンドが見つからない → Path設定の確認\n    *   `entrypoint.sh` エラー → 改行コード問題の確認と再クローン\n    *   `npm ci` エラー → (現状考えられる原因や再試行)\n    *   証明書エラー → セキュリティソフトの確認\n    *   ポート競合エラー → 他コンテナ停止 or ポート変更\n    *   `.env` ファイルが見つからない → 隠しファイル設定 or VSCode利用\n    *   コマンドの違い (`cp` vs `copy`)\n4.  **トラブルシューティングTips:**\n    *   エラーメッセージをLLMに質問するなどの自助努力の方法提示\n\nこれにより、Windowsユーザーがスムーズにセットアップを完了できるよう支援し、利用者の裾野を広げることを目指します。\n\n# 仮原稿\n## はじめに\nこのドキュメントは、Windows環境で広聴AIのセットアップを行うユーザー向けの手順と注意点をまとめたものです。現在の公式READMEは主にUNIX系（Linux, macOS）環境を前提としているため、Windows特有の考慮事項があります。\n\n## 必要なソフトウェア\nセットアップには以下のソフトウェアが必要です。事前にインストールしてください。\n\n1.  **Docker Desktop:**\n    *   公式サイトからダウンロードしてインストールします。\n    *   `winget install -e --id Docker.DockerDesktop` コマンドでもインストール可能です。\n    *   インストール後、Docker Desktopを起動し、必要な初期設定（WSL連携など）を完了させてください。\n    *   **注意:** 自治体PCなどでは、セキュリティポリシーによりインストールが許可されていない場合があります。情報システム部門にご確認ください。\n    *   **注意:** Googleアカウントでのログイン時やWSLアップデート時にエラーが発生することが報告されています。エラーメッセージに従って対処するか、IT管理者に相談してください。「Docker、Googleアカウントにてログイン時にエラー。」「wsl update failed: update failed: updating wsl: exit code: 1...」\n\n2.  **Git for Windows:**\n    *   公式サイトからインストーラーをダウンロードしてインストールします。「Git for Windows Portable」ではなく、通常のインストーラー版を使用してください。\n    *   `winget install -e --id Git.Git` コマンドでもインストール可能です。\n    *   **重要:** インストール中に「Adjusting your PATH environment」の項目で、「Git from the command line and also from 3rd-party software」を選択することを推奨します。これにより、コマンドプロンプトやPowerShellから `git` コマンドが利用可能になります。\n    *   **パス設定確認:** インストール後、コマンドプロンプトまたはPowerShellを開き、`git --version` を実行してバージョン情報が表示されればOKです。表示されない場合（「'git' は、内部コマンドまたは外部コマンド...として認識されていません。」エラー）、環境変数のPathにGitの実行ファイルパス（例: `C:\\Program Files\\Git\\cmd`）を手動で追加する必要があります。「パスを通すという困難な作業」 - 不明な場合はChatGPT等で「Windows 環境変数 パス 通し方」などで検索・質問してください。\n\n3.  **(推奨) テキストエディタ:**\n    *   VSCodeなどのテキストエディタがあると、設定ファイルの編集に便利です。\n\n## セットアップ手順\n\n1.  **リポジトリのクローン (改行コード問題対策):**\n    *   コマンドプロンプトまたはPowerShellを開き、作業したいディレクトリに移動します。\n    *   以下のコマンドを実行して、リポジトリをクローンします。`--config core.autocrlf=false` オプションは、WindowsとLinux/macOS間の改行コードの違いによるエラー (`entrypoint.sh` 関連など) を防ぐために重要です。\n        ```bash\n        git clone --config core.autocrlf=false https://github.com/digitaldemocracy2030/kouchou-ai.git\n        ```\n    *   クローンした `kouchou-ai` ディレクトリに移動します。\n        ```bash\n        cd kouchou-ai\n        ```\n\n2.  **環境設定ファイルの作成:**\n    *   `example.env` ファイルをコピーして `.env` ファイルを作成します。PowerShellでは以下のコマンドで実行できます。\n        ```powershell\n        cp example.env .env\n        ```\n        (コマンドプロンプトの場合は `copy example.env .env`)\n    *   **注意:** `.env` は隠しファイル属性が付くことがあります。Windowsのエクスプローラーで表示されない場合は、「表示」タブ -> 「隠しファイル」にチェックを入れるか、VSCodeなどのエディタで `kouchou-ai` フォルダを開いて `.env` ファイルを編集してください。「.env見つからない」「隠しファイルをfinderで開こうとしていた」\n    *   `.env` ファイルを開き、OpenAI APIキーなどの必要な設定値を記述します。\n\n3.  **アプリケーションの起動:**\n    *   Docker Desktopが起動していることを確認します。\n    *   `kouchou-ai` ディレクトリ内で、以下のコマンドを実行します。**ハイフンなしの `docker compose up` を使用してください。**\n        ```bash\n        docker compose up\n        ```\n    *   初回起動時は、Dockerイメージのダウンロードとビルドに時間がかかります（数分～十数分程度）。「Docker imageがない状態でdocker compose upすると500s以上かかる」\n    *   ビルドと起動が正常に完了すると、ログの最後に `Application startup complete.` のようなメッセージが表示され、Webブラウザで `http://localhost:3000` (Admin Dashboard) と `http://localhost:5173` (レポート画面) にアクセスできるようになります。\n\n## よくある問題と対処法\n\n*   **`git` コマンドが見つからない:**\n    *   Git for Windowsのインストール時にパス設定が適切に行われなかった可能性があります。上記「必要なソフトウェア」のGitの項目を確認し、環境変数Pathを修正してください。\n*   **`entrypoint.sh` 関連のエラー:**\n    *   改行コードの問題である可能性が高いです。上記「リポジトリのクローン」の手順に従い、`--config core.autocrlf=false` オプション付きでクローンし直してください。\n*   **`docker compose up` 中の `npm ci` エラー:**\n    *   `[client-admin builder ... ] RUN npm ci` でエラーが発生する場合があります。(ログ参照) 根本的な解決策はログに記載されていませんが、ネットワーク環境やDockerのリソース割り当てなどが影響している可能性があります。時間をおいて再試行するか、Docker Desktopの設定を見直してください。\n*   **`docker compose up` 中の証明書エラー (`uv` など):**\n    *   会社のセキュリティソフトなどがDocker内の通信をブロックしている可能性があります。「自治体のセキュリティによってuvのインストール時に証明書エラーがおきた」一時的にセキュリティソフトを無効にするか、Docker関連の通信を許可する設定を行ってください。\n*   **`Bind for 0.0.0.0:3000 failed: port is already allocated` エラー:**\n    *   ポート3000が他のアプリケーション（他のDockerコンテナ等）によって既に使用されています。「原因：3000ポートをすでに使っているdocker containerが立ち上がっていた」他のアプリケーションを停止するか、`.env` ファイルで `APP_PORT` を別の番号（例: `3001`）に変更してください。\n*   **`.env` ファイルが見つからない/編集できない:**\n    *   隠しファイルになっている可能性があります。上記「環境設定ファイルの作成」の注意点を確認してください。VSCodeでフォルダを開くのが確実です。\n*   **コマンドプロンプトで `cp` コマンドが使えない:**\n    *   `cp` はPowerShellのコマンドです。コマンドプロンプトでは `copy` を使用してください。もしくはPowerShellを起動して作業してください。「Powershellでないとないかも。cmdではない」\n\n## トラブルシューティングTips\n*   エラーが発生した場合、表示されたエラーメッセージ全体をコピーし、ChatGPTなどのLLMに貼り付けて「このエラーの原因と解決策を教えてください」と質問すると、具体的な解決策が見つかることがあります。「エラーが出たら内容張り付けて「エラーでた助けて」といえばほぼほぼ解決もしてくれます。」\n",
    "type": "issue"
  },
  {
    "id": 2990813561,
    "number": 286,
    "title": "Windows環境でのセットアップの困難さ低減",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/286",
    "user": "nishio",
    "created_at": "2025-04-12T23:58:34Z",
    "body": "READMEがUNIX系前提であり、WindowsユーザーはDocker/Gitのインストール、パス設定、改行コード問題などで躓きやすい。\n\nfrom 4/12 meetup\n>「WindowsユーザーはDocker Desktopのダウンロードからはじまる」\n「GithubのREADMEは現在UNIX系前提?」\n「Git for Windowsのダウンロード」\n「'git' は、内部コマンドまたは外部コマンド、操作可能なプログラムまたはバッチ ファイルとして認識されていません。」\n「パスを通すという困難な作業」\n「entrypoint.shの5行目でエラー。改行コードの関係」\n\n(解決策)\n\nWindows向けのセットアップ手順（Docker, Gitインストール、パス設定含む）をREADMEに詳細に追記する。\n\n改行コード問題を回避するため、リポジトリに .gitattributes ファイルを設定する。「これは.gitattributesで解決可能？(たねのぶ)」「可能です」\n\nクローン時に git clone --config core.autocrlf=false ... を実行するよう案内する。",
    "type": "issue"
  },
  {
    "id": 2990804598,
    "number": 285,
    "title": "[FEATURE]利用可能なLLMを増やす",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/285",
    "user": "nishio",
    "created_at": "2025-04-12T23:50:46Z",
    "body": "# 背景\n現在OpenAI APIのみ対応しており、Gemini無料枠やLocalLLMなど他の選択肢を利用できない。\n\nfrom 4/12 meetup\n>「Geminiの無料枠をOpen AI互換で使えたりする？」\n「他LLM対応はうれしい（LocalLLMなど）」\n「Local LLM(OpenAI互換)、embeddingなどで開発はケチりたい」\n「idobataの方ではopenrouterが使われているのに対して、kouchouではopenaiが使われているのが不便に思った。統一してくれるとありがたいと思う。」\n\n\n<!-- なぜその機能が必要なのか、何が改善されるのか具体的に記入してください -->\n\n\n# 提案内容\n<!-- 実装案やデザイン案があれば記入してください -->\n>Gemini API、OpenRouter API、OpenAI互換のLocalLLMなど、複数のLLMに対応する。\n\n(nishioコメント) OpenRouter APIには追加で対応してもいいかもしれない、ただし「統一」はありえない(OpenRouterを使えないユーザを締め出すことになるから)",
    "type": "issue"
  },
  {
    "id": 2990795300,
    "number": 284,
    "title": "[FEATURE]かかったコストの表示機能",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/284",
    "user": "nishio",
    "created_at": "2025-04-12T23:42:45Z",
    "body": "# 背景\n実行ごとのトークン数やコストが表示されず、利用者がコスト感を把握しにくい。\n\nfrom 4/12 meetup\n>「clineのように実行のたびにトークン、コストが表示されるUIは確かによい(たねのぶ)」\n>「使用者にコスト感覚がついていく」\n\n\n# 提案内容\n(解決策) UIに実行ごとのトークン数と推定コストを表示する機能を追加する。\n\n(nishio補足) 実行前に推定費用を表示する案は過去にあった、これは実行後に実際にかかった費用を表示するところが新しい\n - https://github.com/digitaldemocracy2030/kouchou-ai/issues/79",
    "type": "issue"
  },
  {
    "id": 2990635491,
    "number": 283,
    "title": "[BUG]ScatterChartの全画面表示で要約文が「全画面終了」ボタンの後ろに隠れないようにする処理が不安定",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/283",
    "user": "masatosasano2",
    "created_at": "2025-04-12T18:36:39Z",
    "body": "### 概要\nIssue #278 が PR #282 で修正されたが、以下の課題が残ったため本Issueに切り出された。\n\nPR #282 の修正内容\n![Image](https://github.com/user-attachments/assets/a7a1bd58-febe-4993-a49a-2612b1c90ec9)\n\n残課題\n![Image](https://github.com/user-attachments/assets/3d080c1d-1502-4b09-8aca-fb2c1fdb9e52)\n\n### 再現手順\n\n1. 「全体図」または「濃い意見グループ」モードを選択する\n2. 「全画面表示」ボタンを押す\n3. ブラウザのサイズを極力小さくする\n4. 画面上部の、右端より少し左側あたりでマウスを動かし続ける\n\n### 期待する動作\n\n要約文が「全画面終了」ボタンの後ろに隠れない（正確には、隠れたままにならない）ようにする\n",
    "type": "issue"
  },
  {
    "id": 2988858993,
    "number": 281,
    "title": "[FEATURE]属性フィルタ",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/281",
    "user": "nishio",
    "created_at": "2025-04-11T14:37:35Z",
    "body": "# 背景\nfrom有賀さん\n>年齢層・居住エリアなどで比較をみるニーズは結構ある。\n>一方で、現状それをやろうとすると、集合が異なるcsvを別々に分析にかける形になり、クラスタの括りやビジュアル上の配置も異なるので比較しにくい\n>全部まとめてextractionしてクラスタリング・ラベリングまでした後で、特定のフィルタをかけて件数分布や要約したり、それを比較できると理想\n>そうすると、全て最初に分析されているというよりは、ダッシュボード上で追加で分析をまわす感じか。\nフィルタリングごとの内容の違いの説明まで生成したい。\n\nその機能は過去に実装済み\n- https://github.com/takahiroanno2024/anno-broadlistening/issues/9\n- 具体的には下記2つのPR\n- server side: https://github.com/takahiroanno2024/anno-broadlistening/pull/15\n- client side: https://github.com/takahiroanno2024/anno-broadlistening/pull/21\n\n階層表示をもった広聴AIにする際に、この機能の優先度が低くて移植していないだけ\n\n# 提案内容\n\nサーバサイドはほぼ使えるのではないかと思う\nクライアントサイドはviewがplotlyに変わっていることで同じ方法は使えなくなっていると思う\nこの二つをsub-issueにしてやっていくのが良さそう",
    "type": "issue"
  },
  {
    "id": 2987877642,
    "number": 280,
    "title": "[FEATURE] テスト用のパブコメデータをCSV化する",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/280",
    "user": "ei-blue",
    "created_at": "2025-04-11T07:59:01Z",
    "body": "コードには直接関係ないですが、TODOメモとしてイシューにしておきます。\n（これはFeatureじゃなくてDocumentなんですかね？）\n\n# 背景\n- 自治体での活用を想定して、CSVモード（パブコメモード）を実装した\n- 大量のデータに対してクラスタリングが適切に機能することを確認するため、実際のパブコメデータに対して実験を行いたい\n- そのためのデータ整備をする必要\n\n# 提案内容\n- 最近の件数多めのパブコメとして、以下の資料に含まれる意見をCSVにする\n- やり方はなんでもあり。Pythonを練習したい人にもいいかも。\n環境省\n[除去土壌](https://public-comment.e-gov.go.jp/servlet/Public?CLASSNAME=PCM1040&id=195240105&Mode=1)\n経産省\n[第７次エネルギー基本計画](https://public-comment.e-gov.go.jp/pcm/1040?CLASSNAME=PCM1040&id=620224019&Mode=1)\n内閣府\n[「「新型インフルエンザ等対策政府行動計画」（案）](https://public-comment.e-gov.go.jp/servlet/Public?CLASSNAME=PCM1040&id=060512703&Mode=1)",
    "type": "issue"
  },
  {
    "id": 2984650643,
    "number": 274,
    "title": "[BUG] 静的ファイルがGithub Pagesでうまく表示されない件",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/274",
    "user": "keisuke-a",
    "created_at": "2025-04-10T06:52:19Z",
    "body": "### 概要\n\n静的ファイルをoutして、その中身をgithub pagesで公開すると、out/index.html自体は表示はされるが、画像要素がなかったりリンク先（個別ページ）が404になるなど、うまく表示されない。（参照が絶対パスになってることによる？）\n",
    "type": "issue"
  },
  {
    "id": 2982893942,
    "number": 271,
    "title": "[DOCUMENT] 静的ファイルのホスティング手順のドキュメント化",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/271",
    "user": "nasuka",
    "created_at": "2025-04-09T13:48:25Z",
    "body": "# 現在の問題点\n* static exportで出力したhtmlファイルを、ユーザー（出力者）がどのようにホスティングすべきかわからないことがある\n  * ホスティングには一定のソフトウェアエンジニアリングの知識が必要\n\n# 提案内容\nホスティング方法に関するマニュアルを記載する\nホスティングするサービスの候補としては以下がありそう？\n\n* Github Pages\n  * issue起票済み\n    * https://github.com/digitaldemocracy2030/kouchou-ai/issues/235\n  * 無料で利用可能  \n  * 認証がかけられないのがネックになる可能性がある\n* Netlify\n  * 認証をかけられる & 設定も比較的容易なので、Netlifyを採用できる組織・ユーザーであれば、機能としては恐らくこちらが要件に適しているケースは多そう\n  * ただし、そもそも利用者側でNetlifyを契約できない可能性がある\n* AWS/Azure\n  * 元々これらのクラウドサービスを契約しているのであれば、利用者側での導入は最も容易だと思われるが、設定としてはGithub Pages/Netlifyよりも複雑になりそう\n\n\nAWS/Azureでのニーズがどの程度あるのか見えていないので、一旦Github Pages/Netlifyあたりの手順をまとめられると良さそう？",
    "type": "issue"
  },
  {
    "id": 2979959784,
    "number": 266,
    "title": "[FEATURE]クラスタ数が増えた場合に散布図上でクラスタラベルが被ってしまう",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/266",
    "user": "nasuka",
    "created_at": "2025-04-08T14:20:10Z",
    "updated_at": "2025-04-11T05:26:45Z",
    "body": "# 背景\n* クラスタ数が増えた場合に散布図上でクラスタラベルが被ってしまう\n  * 添付画像は40件で出力したケース。多くのクラスタラベルが被ってしまっている。\n![Image](https://github.com/user-attachments/assets/c8e61e43-ef60-4054-91d0-4b8f3e6f4847)\n\n* この問題により、現在は第一階層のクラスタ数を大きな数値に設定できない\n  * 現在は上限を20としているが、TTTCの過去事例では30件を表示していたケースもあるため、上限をもう少し大きくしたい\n\n# 提案内容\n解決するアプローチは幾つかありそう。\n\n## 対策方針（Claudeによる案）\n1. ラベル表示の選択的制限\n\n- 重要度ベースの選択：クラスタサイズなどに基づき重要なラベルのみ表示\n- 最大表示数の制限：表示するラベル数に上限を設定（例: 最大15個）\n- ユーザー選択型表示：選択されたクラスタのみラベル表示\n\n2. ラベルの視覚的最適化\n\n- フォントサイズの縮小：ラベルのフォントサイズを小さくして占有面積を減らす\n- 可変フォントサイズ：クラスタの重要度に応じてフォントサイズを調整\n- ラベル省略表示：長いラベルを省略形で表示（例: \"長いラベル名\" → \"長いラ...\"）\n\n3. インタラクティブ手法\n\n- 凡例コンポーネントの追加：画面端に凡例を設け、クラスタ一覧を表示\n- ホバー/クリック表示：マウスホバーやクリック時のみラベルを表示\n- ハイライト機能：選択クラスタを強調し他を半透明化\n\n4. レイアウト最適化\n\n- ラベル位置の調整：ラベル同士の衝突を検出し位置を最適化\n- クラスタのグルーピング：近接するクラスタを階層的に表示",
    "type": "issue"
  },
  {
    "id": 2979691677,
    "number": 264,
    "title": "[REFACTOR] GitHub Actions で Biome の lint, format のチェックを実行する",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/264",
    "user": "shgtkshruch",
    "created_at": "2025-04-08T12:47:44Z",
    "updated_at": "2025-04-09T05:02:20Z",
    "body": "# 現在の問題点\n<!-- 現在のコードの何が問題なのか、どのような技術的負債があるかを説明してください -->\n\n- #84 で Biome を導入しましたが、format, lint エラーがあるコードがプルリクエストに含まれていても気づく仕組みが現状では整っていません\n- Biome の lint, format を適用しないコードが取り込まれると、コード全体の統一性が落ちるのと、Biome を適用した他のプルリクエストでコードの差分が出る可能性があります\n  - 本来のプルリクエストとは関係のない差分が出ることで、レビューの負荷が上がりそう\n\n# 提案内容\n<!-- どのようなリファクタリングを提案するのか、具体的に説明してください -->\n\n- client, client admin のコードの修正を含むプルリクエストを作成したら、CI で Biome の format, lint のチェックを実行する\n  - [公式で提供している GitHub Actions と `biome ci`](https://biomejs.dev/recipes/continuous-integration/) コマンドが利用できるかもしれません",
    "type": "issue"
  },
  {
    "id": 2978486958,
    "number": 255,
    "title": "(情報整理)OpenAIが使えないケースのケア",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/255",
    "user": "nishio",
    "created_at": "2025-04-08T03:21:10Z",
    "updated_at": "2025-04-13T07:35:05Z",
    "body": "# 背景\n\n政党に売り込む上で「ChatGPTの政治利用NG」が障害になる可能性がある？→あるのでケアが必要\n\n解決案\n - A: そもそもAzure OpenAI ServiceならOKなのでは説(=対処完了済み)\n - B: Geminiを叩けるように変える\n   - B-1: 直接Geminiを叩く分岐を環境変数でやる\n   - B-2: OpenRouter経由にすることでOpenAI API形式でGeminiを叩けるようにする\n   - B-3: [LiteLLM Proxy](https://scrapbox.io/nishio/LiteLLM_Proxy) でやるマニュアルを作る\n\n\n# 提案内容\n<!-- 実装案やデザイン案があれば記入してください -->",
    "type": "issue"
  },
  {
    "id": 2978480128,
    "number": 254,
    "title": "(情報整理)Windows環境で試す人のためのガイドが必要",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/254",
    "user": "nishio",
    "created_at": "2025-04-08T03:14:53Z",
    "updated_at": "2025-04-13T03:26:23Z",
    "body": "Windows環境で試す人の踏みそうなトラブルシューティング\n\n西尾も角野さんもMacなのでどんなトラブルが起きるのかを観測できてない感、issueでもslackでもガンガン書いてもらえるといいと思う\n\nWindows環境で試すとなった時に、まずいきなり「生環境でやる」「WSLでやる」「Dockerでやる」の3つの選択肢があると思ってて、どれが一番スムーズなのかはよくわかってない、Windows環境のある人の協力があるとありがたいゾーン\n\n関連Slack: https://w1740803485-clv347541.slack.com/archives/C08F7JZPD63/p1744081553571589",
    "type": "issue"
  },
  {
    "id": 2978478982,
    "number": 253,
    "title": "[FEATURE]静的HTML出力してローカルファイルシステムで開いたときに詳細なエラー表示をする",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/253",
    "user": "nishio",
    "created_at": "2025-04-08T03:13:48Z",
    "updated_at": "2025-04-09T05:03:17Z",
    "body": "# 背景\n<!-- なぜその機能が必要なのか、何が改善されるのか具体的に記入してください -->\n\nQ: 静的HTML出力してローカルファイルシステムで開いたとき読み込み中のまま進まない、バグ？\nA: →ブラウザがデータをローカルファイルシステムから読めないことに起因する、GitHubPagesなどにデプロイしちゃえば動くと思う、手元でサーバを立てるてもある、解説があるとベター\n\n関連Slack: https://w1740803485-clv347541.slack.com/archives/C08F7JZPD63/p1744080063900439\n\n# 提案内容\n\nこの件は読み込み中のバーが回りっぱなしになるが裏では即座にエラーになってるはずで、エラーメッセージを出して解決策解説ページへのリンクを示すのが親切だと思う\n\n",
    "type": "issue"
  },
  {
    "id": 2973973916,
    "number": 235,
    "title": "[DOCUMENT] README に GitHub Pages で公開する手順を記載する",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/235",
    "user": "shgtkshruch",
    "created_at": "2025-04-05T07:07:57Z",
    "updated_at": "2025-04-09T08:45:53Z",
    "body": "# 現在の問題点\n<!-- 現在のコードの何が問題なのか、どのような技術的負債があるかを説明してください -->\n\n- client を static build して GitHub Pages で公開する場合、ビルドしたファイルをアップロードすると一部のコードが動かない\n  - 原因: GitHub Pages で動いている Jekyll が `_` から始まるファイルやディレクトリを無視するため、static build 後の `_next` 以下のファイルが 404 になる\n    - https://github.blog/news-insights/the-library/bypassing-jekyll-on-github-pages/\n  - `.nojekyll` というファイルをルートに置くと動くようになるが、この挙動は知らない人が多そうで GitHub Pages で公開する人が同じ罠にハマる可能性がある\n\n# 提案内容\n<!-- どのようなリファクタリングを提案するのか、具体的に説明してください -->\n\n- README の静的ファイル出力のセクションに、GitHub Pages で公開する場合の手順を記載する\n  - ルートに `.nojekyll` ファイルを追加することもここに記載する",
    "type": "issue"
  },
  {
    "id": 2969624362,
    "number": 227,
    "title": "[FEATURE]濃い意見グループの設定画面について",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/227",
    "user": "nishio",
    "created_at": "2025-04-03T13:37:38Z",
    "updated_at": "2025-04-09T05:11:51Z",
    "body": "# 背景\n\n![Image](https://github.com/user-attachments/assets/bb76f174-3347-4e73-aeed-823e8f4272d1)\n最小クラスタは2以上。上が10でいいかは少し微妙で、2,5,10,25,50,100くらいの選択式がいいかもという気持ち\n閉じるボタンが文章に被んている件、見出しと説明が横並びなのを縦並びにすると良いかも\n「濃いグループの設定しかないので中に入れたらどうか」という話が以前悪化が、この設定によって濃いグループを選択できるかどうかが変わるのでそとにあるべき、将来的にはカラーバレットの設定などもここにはいるのかなと思う\n\n<!-- なぜその機能が必要なのか、何が改善されるのか具体的に記入してください -->\n\n\n# 提案内容\n<!-- 実装案やデザイン案があれば記入してください -->",
    "type": "issue"
  },
  {
    "id": 2967838327,
    "number": 225,
    "title": "[BUG] ２回目以降、静的ファイル出力（static build）時 パーミッションエラーが発生する？",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/225",
    "user": "naoyo4",
    "created_at": "2025-04-03T00:12:34Z",
    "updated_at": "2025-04-10T16:11:13Z",
    "body": "### 概要\n\n<!-- バグの簡潔な説明をお願いします -->\n静的ファイル出力（static build） を行う際、最初は問題なく出力ディレクトリーが作成されるが、再度実行するとパーミッションエラーが発生する？\n\n### 再現手順\n\n1. README の手順に則り（ make client-build-static ）、静的ファイル生成（ out ディレクトリ出力 ）\n2. 再度同じことを行うとMakefile手順の最初（ rm -rf out ）でパーミッションエラーが発生\n3. （ Webサーバーにも、FTP でUP時、パーミッションエラーが発生 ）\n\n### 期待する動作\n\n<!-- 本来どう動作すべきかを記入してください -->\n２回目以降もパーミッションエラーが発生せず、処理できる。\n（ WebサーバーにFTPでUPできる ）\n\n### スクリーンショット・ログ\n\n<!-- 必要に応じてスクリーンショットやエラーログなどを添付してください -->\n(base) nao@d500:~/kouchou-ai$ make client-build-static\nrm -rf out\nrm: 'out/images/broadlistening.png' を削除できません: 許可がありません\nrm: 'out/404.html' を削除できません: 許可がありません\nrm: 'out/_next/static/chunks/polyfills-42372ed130431b0a.js' を削除できません: 許可がありません\n：\n：\n\n### その他\n\n<!-- 追加で伝えておきたいことがあれば記入してください -->\nIssue 上げること自体ほぼ初めてで、内容自体も自信ありませんが、アドバイスだけでもいただければ幸いです。\nhttp-server による動作等は、問題ないことは確認済み。",
    "type": "issue"
  },
  {
    "id": 2966115761,
    "number": 220,
    "title": "[FEATURE] frontからstaticなHTMLファイルをexportしてDownloadできるようにする",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/220",
    "user": "takahiroanno",
    "created_at": "2025-04-02T11:43:27Z",
    "updated_at": "2025-04-14T03:47:09Z",
    "body": "# 背景\n* static exportが実装されたが、現在はCLIで実行することしかできず、Webアプリ上で実行できない\n  * `make client-build-static` を実行するとCLIではstatic exportができる\n  * 参考\n    * https://github.com/digitaldemocracy2030/kouchou-ai/pull/198\n    * https://github.com/digitaldemocracy2030/kouchou-ai/pull/195\n\n\n# 提案内容\n* adminの一覧画面で、static exportを実行できるようにする",
    "type": "issue"
  },
  {
    "id": 2962321727,
    "number": 211,
    "title": "[FEATURE]OOMの事後処理",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/211",
    "user": "nishio",
    "created_at": "2025-04-01T06:00:12Z",
    "updated_at": "2025-04-09T05:10:16Z",
    "body": "# 背景\nエラー時にはレポート一覧にその旨が出るが、Out of Memoryで死んだ場合にはエラー内容を書き込む前に死ぬので「処理中」の表示が続いてしまう\n\n\n# 提案内容\n良い解決方法を考えたい\n\n案\n- pidをstatusにもつ\n-  レポート一覧APIが呼ばれた時に、未完了のレポートについてプロセスが生きてるか確認して、死んでるならstatusをエラーに変える\n",
    "type": "issue"
  },
  {
    "id": 2954831783,
    "number": 190,
    "title": "[FEATURE]1回のextractionで複数のcommentを処理する",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/190",
    "user": "nasuka",
    "created_at": "2025-03-28T02:12:39Z",
    "updated_at": "2025-04-09T04:34:58Z",
    "body": "# 背景\n* 現在のextraction処理は1リクエストに1件のコメントを処理しているため、実行に時間がかかる\n  * リクエストそのものの並列化は行われているが、OpenAI APIのrate limitの関係で並列化による高速化も限界がある\n\n\n# 提案内容\n* 1回のextractionで複数のコメントを同時に処理する\n  * 同時処理の件数が増えることで、rate limit(requests per minute)の問題が緩和される\n\nプロンプトのイメージ\n```\nあなたは専門的なリサーチアシスタントで、整理された議論のデータセットを作成するお手伝いをする役割です。\n人工知能に関する公開協議を実施した状況を想定しています。一般市民から寄せられた議論の例を提示しますので、それらをより簡潔で読みやすい形に整理するお手伝いをお願いします。必要な場合は2つの別個の議論に分割することもできますが、多くの場合は1つの議論にまとめる方が望ましいでしょう。\n結果は出力例に記載したjson形式で出力して\n\n## 入力例\n- id1: AIは仕事の効率化に役立つ。人生の相談相手にもなってくれる。\n- id2: AIは電力を消費しすぎる問題がある\n- id3: AIには反対です\n\n## 出力例\n{\n    \"id1\": [\n        \"AIは仕事の効率化に役立つ\",\n        \"AIは人生の相談相手になる\"\n    ],\n    \"id2\": [\n        \"AIは電力消費が大きい\"\n    ],\n    \"id3\": [\n        \"AIには反対\"\n    ]\n}\n```\n\nextraction実行時のLLMのresponse formatが変わるため、周辺の実装も変える必要がある。\n\n## 進め方\n* まずは、上記のようなプロンプト・出力フォーマットに変更して同時処理数を増やした場合にどのようにアウトプットの文言が変わるかを確認する\n  * 入力データは、ツイートレベルの長さのケースと、aipubcomのように1コメントが長いケースの両方で確かめた方が良さそう\n* 抽出結果が問題なさそうであればプロダクトに機能実装する\n",
    "type": "issue"
  },
  {
    "id": 2945409451,
    "number": 170,
    "title": "[FEATURE]ファクトチェック機能の実装",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/170",
    "user": "nasuka",
    "created_at": "2025-03-25T06:18:39Z",
    "updated_at": "2025-04-15T08:32:33Z",
    "body": "# 背景\n* 入力ファイル内のコメントが虚偽の場合がある\n  * e.g. 「◯◯という人物が✗✗という発言をしていたが大変嘆かわしい」というコメントがあったとして、現状ではこのコメントの真偽に関わらずコメントが分析結果に組み込まれてしまう\n\n# 提案内容\n* 個別のコメント（or 意見）についてファクトチェックを行う\n* クラスタリングやクラスタ説明文の生成時にファクトチェックの結果を組み込み\n  * 組み込む方法はいくつかパターンがありそう\n    * 1. 虚偽と判定されたargumentはクラスタ生成以降のプロセスで除外する\n    * 2. クラスタタイトルや説明文生成時に、argumentのテキストだけでなくファクトチェックの結果（真偽）も入力して生成を行う\n    * 3. 散布図上でargumentをホバー表示する際に、虚偽の疑いがあるargumentはそのことが分かるように表示を変える\n  * ↑は一例だが、実現方針の具体化からassigneeの方にやっていただけるとありがたい\n\n# 進め方\n* いきなり機能を実装するのではなく、プロダクトとは独立してスクリプトを実装し、検証用のデータセットを使って結果の妥当性を評価する\n  * 問題なければプロダクトの機能として実装を進める\n  * 一旦実験系のIssueだけ立てておき、実験結果より自動評価が機能することがわかった段階でプロダクトへの実装イシューを立てる\n\n",
    "type": "issue"
  },
  {
    "id": 2945124654,
    "number": 144,
    "title": "[FEATURE]LLMによるクラスタ品質の自動評価（実験）",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/144",
    "user": "nasuka",
    "created_at": "2025-03-25T03:36:54Z",
    "updated_at": "2025-04-16T08:24:30Z",
    "body": "# 背景\nhttps://github.com/digitaldemocracy2030/kouchou-ai/issues/143\n\n* こちらのイシューは上記のサブイシュー\n\n\n# 提案内容\n* LLMによるクラスタ品質の自動評価の実験を行う\n  * 出力されたクラスタタイトル・説明文・所属データ点の情報に基づいて、LLMでクラスタの品質を評価する\n* どのようなアプローチで評価するかは、assigneeの方におまかせする\n  * 例としては、例えば以下のような評価項目のスコアをLLMで出力するようなアプローチがある\n    * クラスタ内部の一貫性評価\n      * クラスタタイトル・説明文・所属データのテキストを入力し、一貫性を100点満点でスコアリングする\n    * クラスタ外部との分離度の評価\n      * クラスタAの情報（タイトルや所属データ等）と、重心の距離が最もAに近いクラスタBの情報をLLMに入力し、分離度を出力する\n",
    "type": "issue"
  },
  {
    "id": 2935293806,
    "number": 113,
    "title": "[REFACTOR] 濃いクラスタのアイコン変更",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/113",
    "user": "nishio",
    "created_at": "2025-03-20T12:20:30Z",
    "updated_at": "2025-04-11T05:51:59Z",
    "body": "# 現在の問題点\n\n<img width=\"249\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bc626d04-e7c0-4245-9b01-e762d433a434\" />\n\n濃いクラスタのアイコンは特に意味はなくこれになっている\n\n\n# 提案内容\n\n多分叩き台の案がないとどう変えたらいいかの議論もできないと思うので雑に描いておく\n\n![Image](https://github.com/user-attachments/assets/9e46dfd6-71d4-4c2b-bbd5-1c79220c8d80)\n\nアイコンとしてデザインできるかは度外視して描くとこんな感じで「全体像」は全体にたくさんの点が散らばっており、「濃いクラスタ」はぎゅっとした「濃い」「密度の高い」塊がいくつかある感じ",
    "type": "issue"
  },
  {
    "id": 2926967566,
    "number": 79,
    "title": "[FEATURE]CSVアップロード時にそれを処理した場合のコストを表示",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/79",
    "user": "nishio",
    "created_at": "2025-03-18T03:19:29Z",
    "updated_at": "2025-04-13T00:54:47Z",
    "body": "# 背景\n\n>安野貴博: ファイルアップロードすると解析掛ける前にコストを教えてくれるの良さそうですね\n>ほづみゆうき: ついにレポート出力まで漕ぎ着けたのですがAPI料金がどれくらいになるのかまったく感覚的に分からずドキドキだったので素人にはあると嬉しいと思います！\n\n# 提案内容\n\nこれを実現するためには2つの要素が必要\n\n- 1: done( ~~いまCSVアップロード即処理開始になっているが、一旦確認ダイアログを挟む必要がある~~ )\n- 2: どのくらいのデータだとどれくらいの費用になるのかの見積もり関数が必要\n\n## (2)の真面目な作り方\n\n(1)は @nanocloudx さんが詳しいと思うが、(2)の部分がわからなくて着手できないと思う。\nUI改善に着手する前に、この関数を作るためのデータ自体を集めていないのでそこからやる必要がある。\n\n- a: extraction\n- b: embedding\n- c: その後のレポート作成\n\n(a)がO(N)でgpt4oなので大きく、(b)はO(N)だがembedding modelなので安く、cはクラスタ数のオーダー(階層モデルなど今回いろいろ追加したから読めない)という感じで、このそれぞれに分けて料金を出せるようにしてデータ量違いでデータを集めればよい。\n\n## (2)の雑な作り方\n\nユーザのペインは「すごい高額だったらどうしよう」だと思うので、まず「100円未満っすね」「100~1000円くらい」「これはでかいから1000円以上かかるよ」の3段階でいいのでは説",
    "type": "issue"
  },
  {
    "id": 2922855549,
    "number": 61,
    "title": "[FEATURE] ISRによる表示遅延の案内表示",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/61",
    "user": "nanocloudx",
    "created_at": "2025-03-16T08:08:04Z",
    "updated_at": "2025-04-11T05:39:15Z",
    "body": "# 背景\n新しいレポートが生成されてから、閲覧可能になるまでの間には約５分のラグがある\nこれは client で ISR を行っており、この頻度を 300sec にしているのが原因（この仕組み自体は問題ない認識）\nこの仕組みを知らないとレポート作成者が迷ってしまうので、５分遅れる旨を client-admin に書くとよさそう\n\nReference\nhttps://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration\n\n# 提案内容\nclient-admin にレポート生成完了から５分ぐらいは表示できないことがわかる文言を追加する\n",
    "type": "issue"
  },
  {
    "id": 2922746686,
    "number": 52,
    "title": "[FEATURE] チャート表示に連動した文章表示",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/52",
    "user": "nanocloudx",
    "created_at": "2025-03-16T03:43:03Z",
    "updated_at": "2025-04-11T06:43:39Z",
    "body": "# 背景\nレポートはチャートとクラスター文章から成っている\n現在はチャート表示を切り替えたりしても、クラスター文章は初期表示のままである\n\n# 提案内容\n表示範囲の更新に合わせて、チャート下部にあるクラスター内容文章(cluster.takeaway)も更新する",
    "type": "issue"
  },
  {
    "id": 2893959131,
    "number": 19,
    "title": "[FEATURE]レポートの複製・再利用機能",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/issues/19",
    "user": "nasuka",
    "created_at": "2025-03-04T11:38:39Z",
    "updated_at": "2025-04-13T01:12:28Z",
    "body": "# 背景\n* 設定を少しだけ変えて実行したいケースがある\n  * 例えばクラスタ数だけ変えるなど\n\n\n# 提案内容\n* レポートの設定複製機能を実装する\n\n\n# 機能の提供価値\n* LLM APIコストの削減\n  * レポート出力までのステップを途中から実行できるようになるためAPIのコストを削減できる\n* レポート出力の高速化",
    "type": "issue"
  },
  {
    "id": 2998210511,
    "number": 314,
    "title": "改行コード混在の解消のため .gitattributes を追加（#243 対応）",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/314",
    "user": "take365",
    "created_at": "2025-04-16T03:07:22Z",
    "merged_at": "2025-04-16T04:17:35Z",
    "body": "# 変更の概要\r\n\r\n- `.gitattributes` を追加し、改行コード（LF / CRLF）をファイル種別ごとに明示的に制御するようにしました。\r\n\r\n# 変更の背景\r\n\r\n- Windows環境での利用時、Git の自動変換（`core.autocrlf`）やエディタの設定により `.sh` ファイルが CRLF になってしまい、\r\n  POSIXシェルで構文エラー（\"unexpected 'fi' (expecting 'then')\"）が発生するケースがありました。\r\n- これは entrypoint.sh の構文の問題ではなく、改行コードが Windows形式（CRLF）で保存されたことが原因です。\r\n- `.gitattributes` によって `*.sh` は LF、`*.bat` や `*.cmd` は CRLF に固定することで、OS間の不整合を防ぎます。\r\n\r\n# 関連Issue\r\n\r\n- https://github.com/digitaldemocracy2030/kouchou-ai/issues/243\r\n- https://github.com/digitaldemocracy2030/kouchou-ai/issues/286\r\n# CLAへの同意\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 2,
    "deletions": 0,
    "changed_files": 1,
    "type": "pr"
  },
  {
    "id": 2998186696,
    "number": 313,
    "title": "Windowsユーザの利用環境構築 #300　の調整",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/313",
    "user": "take365",
    "created_at": "2025-04-16T02:49:17Z",
    "merged_at": "2025-04-16T04:17:06Z",
    "body": "# 変更の概要\r\nsetup_win.bat の文言を英語化し、Docker起動時の挙動を --build に変更\r\n起動・停止用の補助バッチファイル（start_win.bat, stop_win.bat）を追加\r\n運用手順を含めたガイド（windows-setup.md）を追記\r\n\r\n# 変更の背景\r\nリンクが切れている部分があった(sample.envとずれていた）\r\n日本語の影響で処理が異常になった。かといってSJISにするとwebで化ける\r\ndocker compose up -d では.env の変更が反映されないことがあるため、初回実行時から --build を使うように変更\r\nコマンド操作が苦手な非エンジニアの利用者向けに、クリックだけで起動・停止できるバッチファイルを用意\r\nその利用手順を windows-setup.md に明記し、運用しやすい形にしました\r\n\r\n# 関連Issue\r\nhttps://github.com/digitaldemocracy2030/kouchou-ai/issues/300\r\n\r\n\r\n- [x ] CLAの内容を読み、同意しました",
    "additions": 50,
    "deletions": 20,
    "changed_files": 4,
    "type": "pr"
  },
  {
    "id": 2995792597,
    "number": 312,
    "title": "濃いクラスタ抽出で対象となるクラスタがない時にはボタンをdisabledにする",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/312",
    "user": "nishio",
    "created_at": "2025-04-15T09:31:15Z",
    "merged_at": "2025-04-15T09:51:35Z",
    "body": "# 変更の背景+概要\r\n\r\nhttps://w1740803485-clv347541.slack.com/archives/C08F7JZPD63/p1743685246693499\r\n>少ないデータに「濃い意見グループ」分析をかけた時に何が起こるか\r\n>- getDenseClusters関数が末端グループを対象に濃度でのフィルタリングをする。この時「最小クラスタサイズ」の制約があるのでみんな小さすぎる時はフィルター結果が空になる。このフィルターは末端グループだけフィルターし、親グループはそのまま残す仕組みになっている。\r\n>- フィルターされた結果を受け取ったChartコンポーネントは、チャートの種類選択が「濃い意見グループ」の時、データから一番深いグループを計算してそのレベルのグループを表示する。このとき「本来の末端グループがすべてフィルターされてる」ことで、上位のグループが表示されてしまう\r\n>- 修正案: getDenseClustersが「フィルター結果がemptyか」のbooleanをセットで返すようにし、emptyな時には「濃い意見グループ」のボタンをdisabledにする\r\n\r\n# 関連Issue\r\n- #96\r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 103,
    "deletions": 26,
    "changed_files": 3,
    "type": "pr"
  },
  {
    "id": 2995775673,
    "number": 311,
    "title": "レビュアー向けのガイドラインを追記",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/311",
    "user": "nasuka",
    "created_at": "2025-04-15T09:25:07Z",
    "merged_at": "2025-04-15T09:47:10Z",
    "body": "# 変更の概要\r\nレビュアー向けのガイドラインを追記し、DevinのPRに関する取り扱いルールを記載\r\n\r\n\r\n# 変更の背景\r\nDevinのPRについて、レビュアー側がどのようなアクションを起こすべきかわからず戸惑う場面があった\r\n\r\n引用\r\n```\r\nDevinによるPR、作成中で裏で人間と議論してるのか、一旦終わって他人のレビューを待ってるのか区別つかないのでトリガー引いた人がコメントしてからレビューするとかなんかいい感じの運用方針が必要な気がする\r\n```\r\n\r\n# 関連Issue\r\n関連するIssueのリンクをこちらに記載してください\r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 16,
    "deletions": 0,
    "changed_files": 2,
    "type": "pr"
  },
  {
    "id": 2991273334,
    "number": 307,
    "title": "Update windows-setup.md",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/307",
    "user": "nishio",
    "created_at": "2025-04-13T13:51:57Z",
    "merged_at": "2025-04-13T13:52:08Z",
    "body": "軽微なドキュメントの更新\r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 5,
    "deletions": 4,
    "changed_files": 1,
    "type": "pr"
  },
  {
    "id": 2990972837,
    "number": 301,
    "title": "Windows環境でのセットアップ簡素化 (Issue #300)",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/301",
    "user": "nishio",
    "created_at": "2025-04-13T04:02:24Z",
    "merged_at": "2025-04-13T10:01:59Z",
    "body": "## 概要\r\n\r\nこのPRはIssue #300に対応し、Windows環境でのkouchou-aiのセットアップを簡素化するための実装を提供します。\r\n\r\n## 実装内容\r\n\r\n1. `setup_win.bat` - Windowsユーザー向けセットアップスクリプト\r\n   - Docker Desktopの起動確認\r\n   - OpenAI APIキーの入力プロンプト\r\n   - 環境変数の自動設定\r\n   - docker composeによるサービス起動\r\n\r\n2. `docs/windows-setup.md` - Windows環境でのセットアップ手順ドキュメント\r\n   - 前提条件の説明\r\n   - Docker Desktopのインストール手順\r\n   - リポジトリのダウンロード方法\r\n   - OpenAI APIキーの取得方法\r\n   - セットアップの実行手順\r\n   - トラブルシューティング\r\n\r\n## ユーザーストーリー\r\n\r\nこのPRにより、以下のユーザーストーリーが実現されます：\r\n- Docker Desktopをインストール\r\n- zipでrepoをダウンロード\r\n- OpenAI APIキーを取得してくらいチャージする\r\n- setup_win.batを実行\r\n- ブラウザでアクセス可能になる\r\n\r\n## この後の流れ\r\n\r\nこれをマージした後で、Windowsユーザに`docs/windows-setup.md`の手順でセットアップができるか試してもらう\r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 98,
    "deletions": 0,
    "changed_files": 2,
    "type": "pr"
  },
  {
    "id": 2990927067,
    "number": 299,
    "title": "docker-compose → docker compose",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/299",
    "user": "nishio",
    "created_at": "2025-04-13T01:43:23Z",
    "merged_at": "2025-04-13T02:57:04Z",
    "body": "# 変更の概要\r\n- ここに変更の概要を記載してください\r\n\r\n# 変更の背景\r\n- ここに変更が必要となった背景を記載してください\r\n\r\n# 関連Issue\r\nhttps://github.com/digitaldemocracy2030/kouchou-ai/issues/298\r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 3,
    "deletions": 3,
    "changed_files": 1,
    "type": "pr"
  },
  {
    "id": 2989659375,
    "number": 282,
    "title": "fix issue #278 : 要約文が「全画面終了」ボタンの後ろに隠れないようにする",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/282",
    "user": "masatosasano2",
    "created_at": "2025-04-11T20:22:05Z",
    "merged_at": "2025-04-15T02:11:36Z",
    "body": "# 変更の背景\r\n全画面表示の「全画面終了」ボタンの後ろに要素の要約文が一部隠れてしまい、読めないことがある。\r\n\r\n# 関連Issue\r\nhttps://github.com/digitaldemocracy2030/kouchou-ai/issues/278\r\n\r\n# 変更の概要\r\n- `client/components/charts/ScatterChart.tsx` と`client/components/charts/TreemapChart.tsx` の props に `onHover` 用のfunctionを追加。 `onHover` が有効であることは以下で確認： https://github.com/plotly/react-plotly.js/blob/master/src/factory.js\r\n- `client/components/report/Chart.tsx` に `onHover` 用のfunctionを実装。内容は「全画面終了ボタンと要約文の吹き出しが重なる場合に重ならなくなる位置まで吹き出しを下方向にずらす」。\r\n\r\n# 動作確認結果\r\n○\r\n- 全画面表示でない場合は挙動が変わらない\r\n- 要約文がボタンに隠れない場合は挙動が変わらない\r\n- 要約文がボタンに隠れる場合は、一番右上の要素でなくとも被らなくなるまで要約文が下方向にずれる\r\n- 下方向にずれた場合、要約文の背景が吹き出し型であれば吹き出しの先端だけ元の位置に紐づく\r\n\r\n△\r\n- `ScatterChart` の場合、マウス移動のたびに `onHover` と `onUnhover` が交互に発火されるのだが、 `onHover` のたびに要約文が再描画され、本修正の位置ずらしがリセットされてしまう。そのため、 `ScatterChart` ではsetTimeoutで位置ずらしを実行するタイミングを遅らせている。これにより概ね意図通り動作するようになったが、マウスの動かし具合によっては戻ってしまうこともある。ReactのイベントとしてはonMouseMoveなどほしいものが発火されていないので、これ以上精度を上げるには独自にmousemoveイベントなどを作成する必要があるが、効果の割に影響範囲調査含めて実装コストが高そうなので、Issue [#283](https://github.com/digitaldemocracy2030/kouchou-ai/issues/283) に分離する。\r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 51,
    "deletions": 3,
    "changed_files": 3,
    "type": "pr"
  },
  {
    "id": 2987807440,
    "number": 279,
    "title": "エラーで落ちても進捗状況を自動更新する",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/279",
    "user": "101ta28",
    "created_at": "2025-04-11T07:26:14Z",
    "merged_at": "2025-04-11T11:30:40Z",
    "body": "close #277 \r\n\r\n# 変更の概要\r\n- server/serc/routers/admin_report.py\r\n  - ステータスの追加・修正\r\n-  client-admin/app/page.tsx\r\n  - useReportProgressPollの修正\r\n  - ReportCardの修正\r\n  - リロードなしで画面更新するようにしました\r\n\r\n## 添付画像\r\n\r\nエラーが発生した場合\r\n\r\n![error](https://github.com/user-attachments/assets/46c419b4-b8d7-4c70-b7e6-25408f0504f9)\r\n\r\n処理が成功した場合\r\n\r\n![success](https://github.com/user-attachments/assets/104445f1-58b3-409a-ba7a-e53d657bb4fd)\r\n\r\n# 変更の背景\r\n> 正常に動作するとstep1(抽出)からstep8(可視化)まで自動更新され、その後レポートのURLが表示されるが、\r\n> エラーで落ちると進捗が更新されず、ページを再読込して初めてエラーになったことが可視化される。\r\n\r\n# 関連Issue\r\n#277 \r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 141,
    "deletions": 34,
    "changed_files": 2,
    "type": "pr"
  },
  {
    "id": 2986179055,
    "number": 276,
    "title": "revert #258",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/276",
    "user": "nishio",
    "created_at": "2025-04-10T16:07:46Z",
    "merged_at": "2025-04-10T16:08:43Z",
    "body": "# 変更の概要\r\n- #258 の変更により、想定外の環境でデグレが発生しているため一旦もとに戻す\r\n- コメントはこちら: https://github.com/digitaldemocracy2030/kouchou-ai/pull/258#issuecomment-2792560274\r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 1,
    "deletions": 1,
    "changed_files": 1,
    "type": "pr"
  },
  {
    "id": 2984262157,
    "number": 272,
    "title": "[FEATURE]adminのレポート一覧画面にも作成日時を追加する",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/272",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-10T02:06:40Z",
    "merged_at": "2025-04-10T02:15:53Z",
    "body": "issue #268の対応: adminのレポート一覧画面にも作成日時を表示するよう実装しました。\\n\\nクライアント側と同様の実装を行い、日付はJSTタイムゾーンで表示されるようにしています。\\n\\nLink to Devin run: https://app.devin.ai/sessions/5f09835c41a24e2d9f91ed475d0536ff\\nRequested by: nsk.smn@gmail.com",
    "additions": 10,
    "deletions": 0,
    "changed_files": 2,
    "type": "pr"
  },
  {
    "id": 2982265450,
    "number": 270,
    "title": "frontend のコードを push する際に Biome の Lint を実行できるようにする",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/270",
    "user": "shgtkshruch",
    "created_at": "2025-04-09T09:53:33Z",
    "merged_at": "2025-04-10T02:02:15Z",
    "body": "# 変更の概要\r\n- [Lefthook](https://github.com/evilmartians/lefthook) を使って、Git Hooks の pre-push で Biome の Lint を実行できるようにしました\r\n- CONTRIBUTING.md に client, client-admin のコードチェックに関する記載を追加しました\r\n- 動作確認をしている際にフォーマット漏れのコードがあったので、Biome のフォーマットを適用しました\r\n\r\n# 変更の背景\r\n-  Lefthook はデフォルトでは off にしていて、設定ファイルを作成することで on になる設計にしています\r\n    - 理由: 現状の Lefthook の設定は frontend のコードのみで、server 側の開発をする人にも有効にした場合に弊害が出る可能性を避けたかった\r\n    - 最初は安全側に倒して、導入してみて良さそうであればデフォルトで on に変えても良いかもしれません\r\n- pre-commit で毎回チェックすると少し煩雑かなと思ったので、pre-push でチェックするようにしました\r\n\r\n# 関連Issue\r\n- fix: #84 \r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 299,
    "deletions": 47,
    "changed_files": 12,
    "type": "pr"
  },
  {
    "id": 2979635707,
    "number": 262,
    "title": "client-admin に Biome を適用",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/262",
    "user": "shgtkshruch",
    "created_at": "2025-04-08T12:26:20Z",
    "merged_at": "2025-04-09T01:02:00Z",
    "body": "# 変更の概要\r\n- client-admin に Biome を適用しました\r\n\r\n# 変更の背景\r\n- 差分が大きいのでコミット単位でみていただけると良さそうです\r\n  - https://github.com/digitaldemocracy2030/kouchou-ai/commit/4af790cd4bd43d37ea6ef118c9fad9b57fc33541 ESLint を削除\r\n  - https://github.com/digitaldemocracy2030/kouchou-ai/commit/0e9e28da0793a9e2d03b6949caf5c632822e1f2b npm script に Biome のコマンドを追加\r\n  - https://github.com/digitaldemocracy2030/kouchou-ai/commit/680a97801f1e5bef81c846ba4c3230627ce89869 Biome の format を適用（自動で修正できるもののみなので、コードの構造は変わっていない認識です）\r\n  - https://github.com/digitaldemocracy2030/kouchou-ai/commit/d6bd0b4da71079b7437ad0f1082263f66a7bcc4c 自動で直せない format, lint エラーを修正（ここは手動で対応したので見てもらいたいところです）\r\n\r\n# 関連Issue\r\n- #84 \r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 1173,
    "deletions": 4101,
    "changed_files": 32,
    "type": "pr"
  },
  {
    "id": 2978436805,
    "number": 251,
    "title": "[FEATURE] GoogleAnalytics 対応 #54",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/251",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-08T02:32:53Z",
    "merged_at": "2025-04-09T07:56:31Z",
    "body": "GoogleAnalyticsを実装しました。\n\n環境変数`NEXT_PUBLIC_GA_MEASUREMENT_ID`を追加し、client と client-admin の両方のアプリケーションでGoogleAnalytics 4のトラッキングコードを実装しました。\n\n開発環境では自動的にGAが無効になるよう実装しています。\n\nLink to Devin run: https://app.devin.ai/sessions/bf89d99cdeb94897a6a5085d8e34826e\nRequested by: annyotaka@gmail.com",
    "additions": 1012,
    "deletions": 0,
    "changed_files": 12,
    "type": "pr"
  },
  {
    "id": 2976319344,
    "number": 245,
    "title": "[FEATURE] レポート一覧に作成日時を追加する",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/245",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-07T10:00:47Z",
    "merged_at": "2025-04-09T01:09:47Z",
    "body": "Issue #218 の対応: レポート一覧に作成日時を追加しました。\\n\\nLink to Devin run: https://app.devin.ai/sessions/b13628010677450a813d14ed748a51ca\\nRequested by: annyotaka@gmail.com",
    "additions": 9,
    "deletions": 0,
    "changed_files": 4,
    "type": "pr"
  },
  {
    "id": 2976318527,
    "number": 244,
    "title": "[FEATURE] おすすめクラスタ数設定機能の実装 (#241)",
    "state": "merged",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/244",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-07T10:00:36Z",
    "merged_at": "2025-04-09T04:31:12Z",
    "body": "Issue #241 の実装を行いました。\n\n- 案0: README.mdとhow_to_use/README.mdに推奨クラスタ数の情報を追加\n- 案1: CSVアップロード後に推奨クラスタ数設定UIを追加\n- 計算方法: コメント数の立方根(∛n)を基準に計算\n\nGoogle Spreadsheetの部分は無視しています。\n\nテスト手順:\n1. CSVファイルをアップロード\n2. 推奨クラスタ数が表示されることを確認\n3. 「この設定にする」ボタンで設定が適用されることを確認\n\nLink to Devin run: https://app.devin.ai/sessions/4edce5fbbb4241d3b2c60118e98d4b8d\nRequested by: annyotaka@gmail.com",
    "additions": 82,
    "deletions": 1,
    "changed_files": 3,
    "type": "pr"
  },
  {
    "id": 2995172973,
    "number": 309,
    "title": "静的ファイルエクスポート機能の追加 (#220)",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/309",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-15T05:29:02Z",
    "body": "# 静的ファイルエクスポート機能の追加\n\nIssue: #220\n\n## 変更内容\n- clientアプリに静的ファイル出力用APIエンドポイント（/api/static-export）を追加\n- client-adminアプリの一覧画面に「全レポートをエクスポート」ボタンを追加\n- ボタンクリック時にclientの/api/static-exportエンドポイントを呼び出し、静的ビルドを実行\n- 生成されたZIPファイルをダウンロードする機能を実装\n\n## テスト方法\n- clientアプリの/api/static-exportエンドポイントにアクセスし、静的ビルドが実行されZIPファイルがダウンロードされることを確認\n- client-adminアプリの一覧画面の「全レポートをエクスポート」ボタンをクリックし、静的ビルドが実行されZIPファイルがダウンロードされることを確認\n\nLink to Devin run: https://app.devin.ai/sessions/c429bebcd84540059a6560b3dad3db7a\n",
    "additions": 194,
    "deletions": 10,
    "changed_files": 11,
    "type": "pr"
  },
  {
    "id": 2984668982,
    "number": 275,
    "title": "Fix #274: 静的ビルド時のhttp://localhostの参照を相対パスに修正",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/275",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-10T07:00:47Z",
    "body": "このPRでは、静的ビルド時に含まれる絶対URLパス（http://localhost）を相対パスに修正し、どこでも動作するようにします。\n\n修正内容:\n- getApiBaseUrl() 関数を修正して静的ビルド時に相対パスを返すよう変更\n- エラーメッセージの中のURLパス参照を修正\n- metadataBase の設定を静的ビルド時に適切に処理するよう修正\n- GitHub Actions のビルド設定を修正\n\nLink to Devin run: https://app.devin.ai/sessions/11ffaf2b93ea42538a5b43e27563b24c\nRequested by: nsk.smn@gmail.com",
    "additions": 29,
    "deletions": 17,
    "changed_files": 8,
    "type": "pr"
  },
  {
    "id": 2984336107,
    "number": 273,
    "title": "[FEATURE] Admin一覧画面からstatic exportを実行できるようにする",
    "state": "created",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/273",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-10T03:16:15Z",
    "body": "## 変更内容\n- Admin一覧画面に「全レポートをエクスポート」ボタンを追加\n- クライアントサイドにstatic exportを実行するAPIエンドポイントを追加\n- エクスポート結果をZIPファイルとしてダウンロードする機能を実装\n\nissue #220 の対応\n\n### テスト方法\n1. Admin画面のレポート一覧で「全レポートをエクスポート」ボタンをクリック\n2. エクスポート処理が完了するとZIPファイルがダウンロードされる\n3. ZIPファイルを展開し、HTMLファイルが正しく含まれていることを確認\n\n### 実装の詳細\n- 本番環境ではDockerが利用できない可能性があるため、クライアントサイドでビルドを実行する方式に変更\n- クライアントアプリに専用のAPIエンドポイント（/api/static-export）を追加し、npmスクリプトを実行\n- 管理画面からはこのエンドポイントを呼び出してZIPファイルをダウンロード\n\nLink to Devin run: https://app.devin.ai/sessions/99a83805083043dcb3b8a24f38fc766a\nRequested by: nsk.smn@gmail.com",
    "additions": 970,
    "deletions": 27,
    "changed_files": 11,
    "type": "pr"
  },
  {
    "id": 2978849514,
    "number": 258,
    "title": "Fix: 静的ビルド時のパーミッションエラー修正",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/258",
    "user": "nishio",
    "created_at": "2025-04-08T07:20:09Z",
    "updated_at": "2025-04-10T12:21:19Z",
    "body": "# 静的ビルド時のパーミッションエラー修正\r\n\r\n## 問題\r\n静的ファイル出力（static build）を行う際、2回目以降にパーミッションエラーが発生する問題を修正しました。\r\nDockerコンテナ内でrootユーザーとしてファイルが生成されるため、ホスト側の通常ユーザーが`rm -rf out`でファイルを削除できなくなっていました。\r\n\r\n## 解決策\r\nDockerコンテナ起動時にホストと同じユーザーIDを指定する方法（ユーザー指定アプローチ）を実装しました。\r\n`docker compose run`コマンドに`--user $(shell id -u):$(shell id -g)`オプションを追加することで、\r\n生成されるファイルの所有者がホストユーザーになり、パーミッションエラーが発生しなくなります。\r\n\r\n## メリット\r\n- 根本的な解決策（原因を解決）\r\n- 生成されるファイルの所有者が最初からホストユーザーになる\r\n- セキュリティ的に優れている（最小権限の原則に従う）\r\n\r\nFixes #225\r\n\r\nLink to Devin run: https://app.devin.ai/sessions/b996b4b929424c5788a064bcafebf242\r\nRequested by: NISHIO Hirokazu (nishio.hirokazu@gmail.com)\r\n\r\n# CLAへの同意\r\n- 本リポジトリへのコントリビュートには、[コントリビューターライセンス契約（CLA）](https://github.com/digitaldemocracy2030/kouchou-ai/blob/main/CLA.md)に同意することが必須です。\r\n内容をお読みいただき、下記のチェックボックスにチェックをつける（\"- [ ]\" を \"- [x]\" に書き換える）ことで同意したものとみなします。\r\n\r\n- [x] CLAの内容を読み、同意しました",
    "additions": 1,
    "deletions": 1,
    "changed_files": 1,
    "type": "pr"
  },
  {
    "id": 2976337956,
    "number": 248,
    "title": "[FEATURE] レポートの複製・再利用機能 (Issue #19)",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/248",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-07T10:07:21Z",
    "updated_at": "2025-04-09T13:33:47Z",
    "body": "このPRはIssue #19の実装です。レポートの設定を複製・再利用する機能を追加します。\n\n## 変更内容\n- 管理画面に「既存レポートの再利用」オプションを追加\n- 既存レポートの設定を取得するAPIエンドポイントを追加\n- レポート生成時に複製元のレポートの中間成果物をコピーする機能を追加\n\n## リンク\n- Issue: #19\n- Link to Devin run: https://app.devin.ai/sessions/7f69c1c5eace4259828fdcd2cce6f06a\n\n## 検証方法\n1. 管理画面で「既存レポートの再利用」を選択\n2. 既存レポートを選択して設定を読み込む\n3. 設定を変更して新しいレポートを作成\n4. レポートが正常に生成されることを確認",
    "additions": 231,
    "deletions": 7,
    "changed_files": 5,
    "type": "pr"
  },
  {
    "id": 2976324699,
    "number": 246,
    "title": "[FEATURE] 1回のextractionで複数のcommentを処理する",
    "state": "updated",
    "html_url": "https://github.com/digitaldemocracy2030/kouchou-ai/pull/246",
    "user": "devin-ai-integration[bot]",
    "created_at": "2025-04-07T10:02:28Z",
    "updated_at": "2025-04-09T04:36:03Z",
    "body": "# 複数コメントを1回のextraction処理で処理する\n\n## 概要\nIssue #190 の実装です。1回のLLMリクエストで複数のコメントを同時に処理できるようにしました。これにより、処理速度の向上とOpenAI APIのレート制限の問題の緩和が期待できます。\n\n## 変更内容\n- extractionPromptを更新し、複数コメントを一度に処理できるフォーマットに変更\n- extraction.pyにバッチ処理のロジックを実装\n- parse_json_list.pyを拡張し、新しいJSONレスポンス形式に対応\n\n## テスト\n- 短いコメント（ツイートレベル）と長いコメント（公開コメントレベル）の両方でテスト\n- 従来の方法と比較して処理速度の向上を確認\n\nLink to Devin run: https://app.devin.ai/sessions/c9d31459eaed4fe9bc2274aaf699d893\nRequested by: annyotaka@gmail.com\n",
    "additions": 360,
    "deletions": 65,
    "changed_files": 5,
    "type": "pr"
  }
]